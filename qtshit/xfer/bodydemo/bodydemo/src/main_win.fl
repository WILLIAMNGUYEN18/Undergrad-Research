# data file for the Fltk User Interface Designer (fluid)
version 1.0103 
header_name {.h} 
code_name {.cxx}
decl {\#include "viewer.h"} {public
} 

decl {\#include "bodydemo.h"} {public
} 

decl {int dispMode;} {public
} 

class MainWin {open
} {
  Function {MainWin()} {open
  } {
    Fl_Window window {
      label {Body Demo v0.91} open
      xywh {59 89 698 621} resizable
      code0 {\#include "trimesh_render.h"}
      code1 {\#include "Fl/fl_file_chooser.h"}
      code2 {\#include <iostream>}
      code3 {\#include <fstream>} visible
    } {
      Fl_Box viewer {
        label viewer
        xywh {235 0 460 620} box DOWN_BOX resizable
        class Viewer
      }
      Fl_Check_Button whiteCB {
        label {White bkg}
        callback {if (whiteCB->value()) {
bkgColor[0] = 1;
bkgColor[1] = 1;
bkgColor[2] = 1;
}
else {
bkgColor[0] = 0;
bkgColor[1] = 0;
bkgColor[2] = 0;
}
viewer->invalidate();
viewer->redraw();}
        xywh {95 10 25 25} down_box DIAMOND_DOWN_BOX
      }
      Fl_Button smButton {
        callback {wfButton->color(FL_GRAY);
hwButton->color(FL_GRAY);
flButton->color(FL_GRAY);
smButton->color(FL_YELLOW);
displayMode(VM_SMOOTH);
wfButton->redraw();
hwButton->redraw();
flButton->redraw();}
        image {../icons/cube-smooth.gif} xywh {130 50 40 40} color 3
      }
      Fl_Button flButton {
        callback {wfButton->color(FL_GRAY);
hwButton->color(FL_GRAY);
flButton->color(FL_YELLOW);
smButton->color(FL_GRAY);
displayMode(VM_FLAT | VM_WF_ON);
wfButton->redraw();
hwButton->redraw();
smButton->redraw();}
        image {../icons/cube-smoothwf.gif} xywh {90 50 40 40}
      }
      Fl_Button hwButton {
        callback {wfButton->color(FL_GRAY);
hwButton->color(FL_YELLOW);
flButton->color(FL_GRAY);
smButton->color(FL_GRAY);
displayMode(VM_HIDDEN_LINE);
wfButton->redraw();
flButton->redraw();
smButton->redraw();}
        image {../icons/cube-hwf.gif} xywh {50 50 40 40}
      }
      Fl_Button wfButton {
        callback {wfButton->color(FL_YELLOW);
hwButton->color(FL_GRAY);
flButton->color(FL_GRAY);
smButton->color(FL_GRAY);
displayMode(VM_WIREFRAME);
hwButton->redraw();
flButton->redraw();
smButton->redraw();}
        image {../icons/cube-wf.gif} xywh {10 50 40 40}
      }
      Fl_Button rsButton {
        callback {rsButton->color(FL_YELLOW);
rlButton->color(FL_GRAY);
rlButton->redraw();
viewer->controlMode = 0;}
        image {../icons/rot-obj.gif} xywh {10 5 40 40} color 3
      }
      Fl_Button rlButton {
        callback {rlButton->color(FL_YELLOW);
rsButton->color(FL_GRAY);
rsButton->redraw();
viewer->controlMode = 1;}
        image {../icons/rot-light.gif} xywh {50 5 40 40}
      }
      Fl_Output dataSetO {
        label {Data set:}
        xywh {75 95 160 25}
      }
      Fl_Tabs modeTabs {
        callback {int mode = 0;
if (modeTabs->value() == pointsTab)
  mode = 1;
else if (modeTabs->value() == pcaTab)
  mode = 2;
setCurMode(mode);} open
        xywh {0 125 235 500}
      } {
        Fl_Group {} {
          label Sliders open
          xywh {0 150 235 470}
        } {
          Fl_Browser sliderSetB {
            label {Slider sets:}
            callback {if (sliderSetB->value() > 0) {
  curFeature = sliderSetB->value()-1;
  resetFromCur();
  updateSliders();
}}
            xywh {5 210 215 85} type Select align 5
          }
          Fl_Value_Slider vs0 {
            label {val 0:}
            callback {sliderCB();}
            xywh {5 334 225 25} type {Horz Knob} align 5 step 0.1
          }
          Fl_Value_Slider vs1 {
            label {val 1:}
            callback {sliderCB();}
            xywh {5 379 225 25} type {Horz Knob} align 5 step 0.1
          }
          Fl_Value_Slider vs2 {
            label {val 2:}
            callback {sliderCB();}
            xywh {5 424 225 25} type {Horz Knob} align 5 step 0.1
          }
          Fl_Value_Slider vs3 {
            label {val 3:}
            callback {sliderCB();}
            xywh {5 469 225 25} type {Horz Knob} align 5 step 0.1
          }
          Fl_Button {} {
            label Average
            callback {resetToAverage();
updateSliders();
redrawV();}
            xywh {15 155 100 35}
          }
          Fl_Button {} {
            label Random
            callback {resetToRandom();
updateSliders();
redrawV();}
            xywh {130 155 100 35}
          }
          Fl_Value_Slider vs4 {
            label {val 4:}
            callback {sliderCB();}
            xywh {5 514 225 25} type {Horz Knob} align 5 step 0.1
          }
          Fl_Value_Slider vs5 {
            label {val 5:}
            callback {sliderCB();}
            xywh {5 559 225 25} type {Horz Knob} align 5 step 0.1
          }
          Fl_Value_Output scoreVO {
            label {Body likelihood:}
            xywh {105 590 50 25} maximum 10 step 0.1 value 10
          }
          Fl_Round_Button metricRB {
            label Metric
            callback {imperialRB->value(0);
resetFromCur();
updateSliders();}
            xywh {90 295 25 25} down_box ROUND_DOWN_BOX
          }
          Fl_Round_Button imperialRB {
            label Imperial
            callback {metricRB->value(0);
resetFromCur();
updateSliders();}
            xywh {5 295 25 25} down_box ROUND_DOWN_BOX value 1
          }
        }
        Fl_Group pointsTab {
          label Points open
          xywh {0 150 235 470} hide
        } {
          Fl_Button {} {
            label {Clear points}
            callback {bodydemoClearPts();}
            xywh {15 280 110 25}
          }
          Fl_Text_Display infoText {
            xywh {10 190 215 85} box NO_BOX color 29
          }
          Fl_Value_Output pScoreVO {
            label {Body likelihood:}
            xywh {105 590 50 25} maximum 10 step 0.1 value 10
          }
          Fl_Value_Slider conformVS {
            label {Conformity:}
            callback {bodydemoSetConform(conformVS->value());}
            xywh {15 340 215 25} type {Horz Knob} align 5 minimum 0.001 maximum 0.05 step 0.001 value 0.01
          }
          Fl_Check_Button showConstCB {
            label {Show constraints}
            callback {showConstraints = showConstCB->value();
redrawV();}
            xywh {15 375 25 25} down_box DOWN_BOX value 1
          }
          Fl_Check_Button showNormalsCB {
            label {Show normals}
            callback {showNormals = showNormalsCB->value();
redrawV();}
            xywh {15 395 25 25} down_box DOWN_BOX value 1
          }
          Fl_Check_Button showLinesCB {
            label {Show error lines}
            callback {showLines = showLinesCB->value();
redrawV();}
            xywh {15 415 25 25} down_box DOWN_BOX value 1
          }
        }
        Fl_Group pcaTab {
          label PCA open
          xywh {0 150 235 475} hide
        } {
          Fl_Button {} {
            label Random
            callback {resetToRandom();
updatePCASliders();
redrawV();}
            xywh {120 165 100 35}
          }
          Fl_Button {} {
            label Average
            callback {resetToAverage();
updatePCASliders();
redrawV();}
            xywh {10 165 100 35}
          }
          Fl_Value_Slider vsp1 {
            label 1
            callback {updatePCAVal(1, vsp1->value());}
            xywh {25 215 205 25} type {Horz Knob} align 4
          }
          Fl_Value_Slider vsp2 {
            label 2
            callback {updatePCAVal(2, vsp2->value());}
            xywh {25 240 205 25} type {Horz Knob} align 4
          }
          Fl_Value_Slider vsp3 {
            label 3
            callback {updatePCAVal(3, vsp3->value());}
            xywh {25 265 205 25} type {Horz Knob} align 4
          }
          Fl_Value_Slider vsp4 {
            label 4
            callback {updatePCAVal(4, vsp4->value());}
            xywh {25 290 205 25} type {Horz Knob} align 4
          }
          Fl_Value_Slider vsp5 {
            label 5
            callback {updatePCAVal(5, vsp5->value());}
            xywh {25 315 205 25} type {Horz Knob} align 4
          }
          Fl_Value_Slider vsp6 {
            label 6
            callback {updatePCAVal(6, vsp6->value());}
            xywh {25 340 205 25} type {Horz Knob} align 4
          }
          Fl_Value_Slider vsp7 {
            label 7
            callback {updatePCAVal(7, vsp7->value());}
            xywh {25 365 205 25} type {Horz Knob} align 4
          }
          Fl_Value_Slider vsp8 {
            label 8
            callback {updatePCAVal(8, vsp8->value());}
            xywh {25 390 205 25} type {Horz Knob} align 4
          }
          Fl_Value_Slider vsp9 {
            label 9
            callback {updatePCAVal(9, vsp9->value());}
            xywh {25 415 205 25} type {Horz Knob} align 4
          }
          Fl_Value_Slider vsp10 {
            label 10
            callback {updatePCAVal(10, vsp10->value());}
            xywh {25 440 205 25} type {Horz Knob} align 4
          }
        }
      }
      Fl_Button {} {
        callback {char *fname = fl_file_chooser("Save mesh...", "*.obj", NULL);
if (fname) {
  bodydemoSaveMesh(fname);
}}
        image {C:/allen/bodydemo/icons/save.gif} xywh {190 50 40 40}
      }
    }
    code {viewer->mainWin = this;} {}
  }
  Function {viewerResize(int x, int y, bool video)} {open
  } {
    code {if (x < 0) {
 // ...
}
int newW = window->w() + x - viewer->w();
int newH = window->h() + y - viewer->h();
window->resize(window->x(), window->y(), newW, newH);} {}
  }
  Function {displayMode(int mode)} {open return_type void
  } {
    code {dispMode = mode;
//if (!lightingEnabled)
//	dispMode = dispMode & (~(VM_SURF_FLAT | VM_SURF_SMOOTH));
viewer->redraw();} {}
  }
  Function {sliderCB()} {open return_type void
  } {
    code {static float *f = NULL;
if (f == NULL) {
  f = new float[7];
}
if (imperialRB->value() == 1) {
f[0] = pow((1.0 / fCirc[curFeature].iMult[0]) * vs0->value(),1.0/fCirc[curFeature].power[0]);
f[1] = pow((1.0 / fCirc[curFeature].iMult[1]) * vs1->value(),1.0/fCirc[curFeature].power[1]);
f[2] = pow((1.0 / fCirc[curFeature].iMult[2]) * vs2->value(),1.0/fCirc[curFeature].power[2]);
f[3] = pow((1.0 / fCirc[curFeature].iMult[3]) * vs3->value(),1.0/fCirc[curFeature].power[3]);
f[4] = pow((1.0 / fCirc[curFeature].iMult[4]) * vs4->value(),1.0/fCirc[curFeature].power[4]);
f[5] = pow((1.0 / fCirc[curFeature].iMult[5]) * vs5->value(),1.0/fCirc[curFeature].power[5]);
}
else {
f[0] = pow((1.0 / fCirc[curFeature].mult[0]) * vs0->value(),1.0/fCirc[curFeature].power[0]);
f[1] = pow((1.0 / fCirc[curFeature].mult[1]) * vs1->value(),1.0/fCirc[curFeature].power[1]);
f[2] = pow((1.0 / fCirc[curFeature].mult[2]) * vs2->value(),1.0/fCirc[curFeature].power[2]);
f[3] = pow((1.0 / fCirc[curFeature].mult[3]) * vs3->value(),1.0/fCirc[curFeature].power[3]);
f[4] = pow((1.0 / fCirc[curFeature].mult[4]) * vs4->value(),1.0/fCirc[curFeature].power[4]);
f[5] = pow((1.0 / fCirc[curFeature].mult[5]) * vs5->value(),1.0/fCirc[curFeature].power[5]);
}

setFeatures(curFeature, f);
redrawV();} {}
  }
  Function {updateSliders()} {open return_type void
  } {
    code {int i = 0;
for (i=0; i < 6; i++) {
  Fl_Value_Slider *f;
  switch (i) {
    case 0: f = vs0; break;
    case 1: f = vs1; break;
    case 2: f = vs2; break;
    case 3: f = vs3; break;
    case 4: f = vs4; break;
    case 5: f = vs5; break;
   }
  if (fCirc[curFeature].numFeatures > i) {
    f->activate();
    if (imperialRB->value() == 1) {
      f->value(fCirc[curFeature].iMult[i] * pow(featureBase[i],fCirc[curFeature].power[i]));
      f->label(fCirc[curFeature].iName[i]);
      double factor = fCirc[curFeature].iMult[i] / fCirc[curFeature].mult[i];
      f->bounds(fCirc[curFeature].minV[i]*factor, fCirc[curFeature].maxV[i]*factor);
    }
    else {
      f->value(fCirc[curFeature].mult[i] * pow(featureBase[i],fCirc[curFeature].power[i]));
      f->label(fCirc[curFeature].name[i]);
      f->bounds(fCirc[curFeature].minV[i], fCirc[curFeature].maxV[i]);
    }
  }
  else {
    f->deactivate();
    f->label("");
    f->bounds(0, 1);
    f->value(0);
  }
}} {}
  }
  Function {updateSets()} {open return_type void
  } {
    code {dataSetO->value(setName);
sliderSetB->clear();
int i;
for (i=0; i < numFeatureMats; i++) {
  sliderSetB->add(fNames[i]);
}
sliderSetB->select(1);} {}
  }
  Function {updatePCASliders()} {open return_type void
  } {
    code {vsp1->value(curPCA[0]);
vsp1->minimum(-2*sqrt(variance[0]));
vsp1->maximum(2*sqrt(variance[0]));

vsp2->value(curPCA[1]);
vsp2->minimum(-2*sqrt(variance[1]));
vsp2->maximum(2*sqrt(variance[1]));

vsp3->value(curPCA[2]);
vsp3->minimum(-2*sqrt(variance[2]));
vsp3->maximum(2*sqrt(variance[2]));

vsp4->value(curPCA[3]);
vsp4->minimum(-2*sqrt(variance[3]));
vsp4->maximum(2*sqrt(variance[3]));

vsp5->value(curPCA[4]);
vsp5->minimum(-2*sqrt(variance[4]));
vsp5->maximum(2*sqrt(variance[4]));

vsp6->value(curPCA[5]);
vsp6->minimum(-2*sqrt(variance[5]));
vsp6->maximum(2*sqrt(variance[5]));

vsp7->value(curPCA[6]);
vsp7->minimum(-2*sqrt(variance[6]));
vsp7->maximum(2*sqrt(variance[6]));

vsp8->value(curPCA[7]);
vsp8->minimum(-2*sqrt(variance[7]));
vsp8->maximum(2*sqrt(variance[7]));

vsp9->value(curPCA[8]);
vsp9->minimum(-2*sqrt(variance[8]));
vsp9->maximum(2*sqrt(variance[8]));

vsp10->value(curPCA[9]);
vsp10->minimum(-2*sqrt(variance[9]));
vsp10->maximum(2*sqrt(variance[9]));} {
      callback {updatePCAVal(1, vsp1->value());} selected
    }
  }
} 
