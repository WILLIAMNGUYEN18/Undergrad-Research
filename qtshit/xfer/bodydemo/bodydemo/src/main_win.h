// generated by Fast Light User Interface Designer (fluid) version 1.0103

#ifndef main_win_h
#define main_win_h
#include <FL/Fl.H>
#include "viewer.h"
#include "bodydemo.h"
extern int dispMode;
#include <FL/Fl_Window.H>
#include "trimesh_render.h"
#include "Fl/fl_file_chooser.h"
#include <iostream>
#include <fstream>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Text_Display.H>

class MainWin {
public:
  MainWin();
  Fl_Window *window;
  Viewer *viewer;
  Fl_Check_Button *whiteCB;
private:
  inline void cb_whiteCB_i(Fl_Check_Button*, void*);
  static void cb_whiteCB(Fl_Check_Button*, void*);
public:
  Fl_Button *smButton;
private:
  inline void cb_smButton_i(Fl_Button*, void*);
  static void cb_smButton(Fl_Button*, void*);
public:
  Fl_Button *flButton;
private:
  inline void cb_flButton_i(Fl_Button*, void*);
  static void cb_flButton(Fl_Button*, void*);
public:
  Fl_Button *hwButton;
private:
  inline void cb_hwButton_i(Fl_Button*, void*);
  static void cb_hwButton(Fl_Button*, void*);
public:
  Fl_Button *wfButton;
private:
  inline void cb_wfButton_i(Fl_Button*, void*);
  static void cb_wfButton(Fl_Button*, void*);
public:
  Fl_Button *rsButton;
private:
  inline void cb_rsButton_i(Fl_Button*, void*);
  static void cb_rsButton(Fl_Button*, void*);
public:
  Fl_Button *rlButton;
private:
  inline void cb_rlButton_i(Fl_Button*, void*);
  static void cb_rlButton(Fl_Button*, void*);
public:
  Fl_Output *dataSetO;
  Fl_Tabs *modeTabs;
private:
  inline void cb_modeTabs_i(Fl_Tabs*, void*);
  static void cb_modeTabs(Fl_Tabs*, void*);
public:
  Fl_Browser *sliderSetB;
private:
  inline void cb_sliderSetB_i(Fl_Browser*, void*);
  static void cb_sliderSetB(Fl_Browser*, void*);
public:
  Fl_Value_Slider *vs0;
private:
  inline void cb_vs0_i(Fl_Value_Slider*, void*);
  static void cb_vs0(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vs1;
private:
  inline void cb_vs1_i(Fl_Value_Slider*, void*);
  static void cb_vs1(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vs2;
private:
  inline void cb_vs2_i(Fl_Value_Slider*, void*);
  static void cb_vs2(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vs3;
private:
  inline void cb_vs3_i(Fl_Value_Slider*, void*);
  static void cb_vs3(Fl_Value_Slider*, void*);
  inline void cb_Average_i(Fl_Button*, void*);
  static void cb_Average(Fl_Button*, void*);
  inline void cb_Random_i(Fl_Button*, void*);
  static void cb_Random(Fl_Button*, void*);
public:
  Fl_Value_Slider *vs4;
private:
  inline void cb_vs4_i(Fl_Value_Slider*, void*);
  static void cb_vs4(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vs5;
private:
  inline void cb_vs5_i(Fl_Value_Slider*, void*);
  static void cb_vs5(Fl_Value_Slider*, void*);
public:
  Fl_Value_Output *scoreVO;
  Fl_Round_Button *metricRB;
private:
  inline void cb_metricRB_i(Fl_Round_Button*, void*);
  static void cb_metricRB(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *imperialRB;
private:
  inline void cb_imperialRB_i(Fl_Round_Button*, void*);
  static void cb_imperialRB(Fl_Round_Button*, void*);
public:
  Fl_Group *pointsTab;
private:
  inline void cb_Clear_i(Fl_Button*, void*);
  static void cb_Clear(Fl_Button*, void*);
public:
  Fl_Text_Display *infoText;
  Fl_Value_Output *pScoreVO;
  Fl_Value_Slider *conformVS;
private:
  inline void cb_conformVS_i(Fl_Value_Slider*, void*);
  static void cb_conformVS(Fl_Value_Slider*, void*);
public:
  Fl_Check_Button *showConstCB;
private:
  inline void cb_showConstCB_i(Fl_Check_Button*, void*);
  static void cb_showConstCB(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *showNormalsCB;
private:
  inline void cb_showNormalsCB_i(Fl_Check_Button*, void*);
  static void cb_showNormalsCB(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *showLinesCB;
private:
  inline void cb_showLinesCB_i(Fl_Check_Button*, void*);
  static void cb_showLinesCB(Fl_Check_Button*, void*);
public:
  Fl_Group *pcaTab;
private:
  inline void cb_Random1_i(Fl_Button*, void*);
  static void cb_Random1(Fl_Button*, void*);
  inline void cb_Average1_i(Fl_Button*, void*);
  static void cb_Average1(Fl_Button*, void*);
public:
  Fl_Value_Slider *vsp1;
private:
  inline void cb_vsp1_i(Fl_Value_Slider*, void*);
  static void cb_vsp1(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vsp2;
private:
  inline void cb_vsp2_i(Fl_Value_Slider*, void*);
  static void cb_vsp2(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vsp3;
private:
  inline void cb_vsp3_i(Fl_Value_Slider*, void*);
  static void cb_vsp3(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vsp4;
private:
  inline void cb_vsp4_i(Fl_Value_Slider*, void*);
  static void cb_vsp4(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vsp5;
private:
  inline void cb_vsp5_i(Fl_Value_Slider*, void*);
  static void cb_vsp5(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vsp6;
private:
  inline void cb_vsp6_i(Fl_Value_Slider*, void*);
  static void cb_vsp6(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vsp7;
private:
  inline void cb_vsp7_i(Fl_Value_Slider*, void*);
  static void cb_vsp7(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vsp8;
private:
  inline void cb_vsp8_i(Fl_Value_Slider*, void*);
  static void cb_vsp8(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vsp9;
private:
  inline void cb_vsp9_i(Fl_Value_Slider*, void*);
  static void cb_vsp9(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vsp10;
private:
  inline void cb_vsp10_i(Fl_Value_Slider*, void*);
  static void cb_vsp10(Fl_Value_Slider*, void*);
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
public:
  void viewerResize(int x, int y, bool video);
  void displayMode(int mode);
  void sliderCB();
  void updateSliders();
  void updateSets();
  void updatePCASliders();
};
#endif
