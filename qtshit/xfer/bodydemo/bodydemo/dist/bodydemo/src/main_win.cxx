// generated by Fast Light User Interface Designer (fluid) version 1.0103

#include "main_win.h"
int dispMode;

inline void MainWin::cb_whiteCB_i(Fl_Check_Button*, void*) {
  if (whiteCB->value()) {
bkgColor[0] = 1;
bkgColor[1] = 1;
bkgColor[2] = 1;
}
else {
bkgColor[0] = 0;
bkgColor[1] = 0;
bkgColor[2] = 0;
}
viewer->invalidate();
viewer->redraw();
}
void MainWin::cb_whiteCB(Fl_Check_Button* o, void* v) {
  ((MainWin*)(o->parent()->user_data()))->cb_whiteCB_i(o,v);
}

inline void MainWin::cb_smButton_i(Fl_Button*, void*) {
  wfButton->color(FL_GRAY);
hwButton->color(FL_GRAY);
flButton->color(FL_GRAY);
smButton->color(FL_YELLOW);
displayMode(VM_SMOOTH);
wfButton->redraw();
hwButton->redraw();
flButton->redraw();
}
void MainWin::cb_smButton(Fl_Button* o, void* v) {
  ((MainWin*)(o->parent()->user_data()))->cb_smButton_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_cube[] = {
"32 32 -162 1",
" \300\300\300!\17\16\25\"\202\200\377#\224\223\376$\230\227\377%\234\233\377&\
\242\241\377\'\243\242\377(\244\243\377)\255\254\377*\256\255\377+\260\257\
\377,\262\261\377-\260\257\375.\257\256\373/\263\262\377""0\264\263\377""1\
\272\271\377""2\273\272\377""3\304\303\377""4\322\321\373""5km\377""6kk\376""7\
jj\375""8ji\373""9ij\371:hg\366;ff\362<ll\377=ml\377>jj\371?ii\370@ij\370""Aff\
\360""Bmm\377""Cii\366""Dhh\364""Enn\376""Fop\377Gsr\377Hoo\370Itu\377Juu\377K\
vw\377Lpp\362Mxz\377Njj\342Oyy\377Pvw\370Qzz\375Rtt\360Sxy\367T}~\377U{{\371V\
\200\200\377W||\370X||\365Y\203\203\377Z\204\204\377[\205\205\377\\\177\177\
\364]\206\207\377^\203\204\371_\210\210\377`\203\203\366""a\210\210\375""b\
\212\212\375""c\210\210\372""d\216\216\377""e\216\216\375""f\220\221\377g\217\
\220\376h\221\221\377i\222\222\377j\223\223\377k\224\224\377l\225\225\377m\t\t\
\17n\234\234\377o\241\241\377p\241\242\377q\242\243\377r\245\245\377s\247\247\
\377t\250\250\377u\251\251\377v\254\254\377w\255\255\377x\255\256\377y\256\
\256\377z\260\260\377{\261\261\377|\261\262\377}\250\250\362~\262\262\377\177\
\261\261\376\200\254\254\366\201\263\263\377\202\264\264\377\203\264\265\377\
\204\260\260\371\205\265\265\377\206\266\266\377\207\266\267\377\210\267\267\
\377\211\267\270\377\212\270\270\377\213\270\271\377\214\271\271\377\215\272\
\272\377\216\273\273\377\217\273\274\377\220\274\275\377\221\275\275\377\222\
\275\276\377\223\274\274\376\224\277\277\377\225\300\300\377\226\301\301\377\
\227\303\303\377\230\304\304\377\231\305\305\377\232\311\311\377\233\314\314\
\377\234\316\316\377\235\303\303\362\236\317\317\377\237\320\320\377\240\322\
\322\377\241\323\323\377\242\321\321\375\243\317\317\372\244\316\316\371\245\
\324\324\377\246\323\323\376\247\320\320\373\250\315\315\367\251\314\314\366\
\252\313\313\364\253os\373\254\234\236\377\255\262\264\377\256\275\277\377\
\257\301\303\377\260\302\304\377\261\304\305\377\262\316\317\377\263\321\322\
\377\264\322\323\377\265\323\324\377\266\305\306\357\267\323\324\376\270\13\f\
\23\271\5\6\t\272\2\3\3\273\0\2\1\274\0\1\0\275\1\1\0\276\1\0\0\277\0\0\0\300\
\277\277\277\301\2\2\2",
"                                ",
"                                ",
"                                ",
"                                ",
"          \277\277\277\277\277\277\277\275\276\277\277\277\277\277\277\277\
\277\277\277   ",
"         \277\245\245\245\245\245\245""4\250\252\251\247\246\245\267\244\266\
\235>\277   ",
"        \277\245\245\245\245\245\245\245\245\245\265\245\245\245\245\245\262\
\223^@\277   ",
"       \277\245\245\245\245\245\245\245\245\245\245\245\245\245\241\237\232\
\214\254S>\277   ",
"      \277\245\245\245\245\245\245\245\245\265\241\241\241\240\237\233\231""1\
sgP:\301   ",
"     \277\243\242\241\264\263\262\236\236\262\234\234\234\234\233\232""32)%cR\
:\271   ",
"    \277\200\204\212\216\256\224\226\257\260\230\230\261\231\231\227\225\215+\
\'#`R:\270   ",
"    \277}{|~/\205\207\213\214\215\217\220\222\221\217\212,tne\\R:!   ",
"    \277.{{{{||,~\255\203\210\212\211\206\201*($bXR:m   ",
"    \277{{{{{{{{{{|/0\202\201{v&l_UE:\272   ",
"    \277{{{{{{{{{{{{|||{vok]QH:\276   ",
"    \277{{{{{{{{{{{{{{{{voj[OE:\277   ",
"    \277{{{{{{{{{{{{{{{{voiZK5?\277   ",
"    \277{{{{{{{{{{{{{{{{vohYI=;\277   ",
"    \277{{{{{{{{{{{{{{{{vph\"J<A\275   ",
"    \277{{{{{{{{{{{{{{{{xqhVG<:\273   ",
"    \277{{{{{{{{{{{{{{{{zrfTF<8\274   ",
"    \277{{{{{{{{{{{{{{{{{udMB76\277   ",
"    \277{{{{{{{{{{{{{{{{{wa\253""C6\277    ",
"    \277{{{{{{{{{{{{{{{{{xW9D\277     ",
"    \277{{{{{{{{{{{{{{{{{yL9\277\300     ",
"    \277{{{{{{{{{{{{{{{{{-N\277       ",
"    \277{{{{{{{{{{{{{{{{{\177\277        ",
"    \277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\277\
\277         ",
"                                ",
"                                ",
"                                ",
"                                "
};
static Fl_Pixmap image_cube(idata_cube);

inline void MainWin::cb_flButton_i(Fl_Button*, void*) {
  wfButton->color(FL_GRAY);
hwButton->color(FL_GRAY);
flButton->color(FL_YELLOW);
smButton->color(FL_GRAY);
displayMode(VM_FLAT | VM_WF_ON);
wfButton->redraw();
hwButton->redraw();
smButton->redraw();
}
void MainWin::cb_flButton(Fl_Button* o, void* v) {
  ((MainWin*)(o->parent()->user_data()))->cb_flButton_i(o,v);
}

static const char *idata_cube1[] = {
"32 32 -123 1",
" \300\300\300!\202\200\377\"\224\223\376#\230\227\377$\234\233\377%\243\242\
\377&\256\255\377\'\262\261\377(\257\256\373)\263\262\377*\264\263\377+\272\
\271\377,\273\272\377-\304\303\377.\322\321\373/km\377""0kk\376""1jj\375""2ji\
\373""3ij\371""4hg\366""5ff\362""6ll\377""7ml\377""8jj\371""9ii\370:ij\370;ff\
\360<mm\377=ii\366>hh\364?nn\376@op\377""Asr\377""Boo\370""Ctu\377""Duu\377""E\
vw\377""Fpp\362Gxz\377Hjj\342Iyy\377Jvw\370Kzz\375Ltt\360Mxy\367N}~\377O{{\
\371P\200\200\377Q||\370R||\365S\203\203\377T\204\204\377U\205\205\377V\177\
\177\364W\206\207\377X\210\210\377Y\203\203\366Z\210\210\375[\212\212\375\\\
\210\210\372]\216\216\377^\216\216\375_\220\221\377`\217\220\376""a\221\221\
\377""b\222\222\377""c\223\223\377""d\224\224\377""e\225\225\377""f\234\234\
\377g\254\254\377h\255\256\377i\260\260\377j\261\261\377k\261\262\377l\250\
\250\362m\262\262\377n\263\263\377o\264\264\377p\264\265\377q\265\265\377r\
\266\266\377s\266\267\377t\267\267\377u\267\270\377v\270\270\377w\270\271\377x\
\271\271\377y\272\272\377z\273\274\377{\274\275\377|\275\275\377}\275\276\377~\
\274\274\376\177\305\305\377\200\311\311\377\201\314\314\377\202\316\316\377\
\203\303\303\362\204\317\317\377\205\320\320\377\206\322\322\377\207\323\323\
\377\210\321\321\375\211\317\317\372\212\316\316\371\213\324\324\377\214\323\
\323\376\215\320\320\373\216\315\315\367\217\314\314\366\220\313\313\364\221os\
\373\222\262\264\377\223\316\317\377\224\321\322\377\225\322\323\377\226\323\
\324\377\227\305\306\357\230\323\324\376\231\0\0\0\232\277\277\277",
"                                ",
"                                ",
"                                ",
"                                ",
"          \231\231\231\231\231\231\231\231\231\231\231\231\231\231\231\231\
\231\231\231   ",
"         \231\213\213\213\213\213\213.\216\220\217\215\214\213\230\212\227\
\203\231\231   ",
"        \231\213\213\213\213\213\213\213\213\213\226\213\213\213\213\213\223~\
\231:\231   ",
"       \231\213\213\213\213\213\213\213\213\213\213\213\213\213\207\205\200x\
\231M8\231   ",
"      \231\213\213\213\213\213\213\213\213\226\207\207\207\206\205\201\177+\
\231`J4\231   ",
"     \231\211\210\207\225\224\223\204\204\223\202\202\202\202\201\200-,\231$\
\\L4\231   ",
"    \231\231\231\231\231\231\231\231\231\231\231\231\231\231\231\231\231\231\
\231%\"YL4\231   ",
"    \231ljkm)qswxyz{}|zv\'\231""f^VL4\231   ",
"    \231(jjjjkk\'m\222ptvurn&\231#[RL4\231   ",
"    \231jjjjjjjjjjk)*onjg\231""eXO?4\231   ",
"    \231jjjjjjjjjjjjkkkjg\231""dWKB4\231   ",
"    \231jjjjjjjjjjjjjjjjg\231""cUI?4\231   ",
"    \231jjjjjjjjjjjjjjjjg\231""bTE/9\231   ",
"    \231jjjjjjjjjjjjjjjjg\231""aSC75\231   ",
"    \231jjjjjjjjjjjjjjjjg\231""a!D6;\231   ",
"    \231jjjjjjjjjjjjjjjjh\231""aPA64\231   ",
"    \231jjjjjjjjjjjjjjjji\231_N@62\231   ",
"    \231jjjjjjjjjjjjjjjjj\231]G<10\231   ",
"    \231jjjjjjjjjjjjjjjjj\231Z\221=0\231    ",
"    \231jjjjjjjjjjjjjjjjj\231Q3>\231     ",
"    \231jjjjjjjjjjjjjjjjj\231""F3\231\232     ",
"    \231jjjjjjjjjjjjjjjjj\231H\231       ",
"    \231jjjjjjjjjjjjjjjjj\231\231        ",
"    \231\231\231\231\231\231\231\231\231\231\231\231\231\231\231\231\231\231\
\231         ",
"                                ",
"                                ",
"                                ",
"                                "
};
static Fl_Pixmap image_cube1(idata_cube1);

inline void MainWin::cb_hwButton_i(Fl_Button*, void*) {
  wfButton->color(FL_GRAY);
hwButton->color(FL_YELLOW);
flButton->color(FL_GRAY);
smButton->color(FL_GRAY);
displayMode(VM_HIDDEN_LINE);
wfButton->redraw();
flButton->redraw();
smButton->redraw();
}
void MainWin::cb_hwButton(Fl_Button* o, void* v) {
  ((MainWin*)(o->parent()->user_data()))->cb_hwButton_i(o,v);
}

static const char *idata_cube2[] = {
"32 32 -2 1",
" \300\300\300!\0\0\0",
"                                ",
"                                ",
"                                ",
"                                ",
"         !!!!!!!!!!!!!!!!!!!    ",
"        !                 !!    ",
"       !                 ! !    ",
"      !                 !  !    ",
"     !                 !   !    ",
"    !                 !    !    ",
"   !!!!!!!!!!!!!!!!!!!     !    ",
"   !                 !     !    ",
"   !                 !     !    ",
"   !                 !     !    ",
"   !                 !     !    ",
"   !                 !     !    ",
"   !                 !     !    ",
"   !                 !     !    ",
"   !                 !     !    ",
"   !                 !     !    ",
"   !                 !     !    ",
"   !                 !     !    ",
"   !                 !    !     ",
"   !                 !   !      ",
"   !                 !  !       ",
"   !                 ! !        ",
"   !                 !!         ",
"   !!!!!!!!!!!!!!!!!!!          ",
"                                ",
"                                ",
"                                ",
"                                "
};
static Fl_Pixmap image_cube2(idata_cube2);

inline void MainWin::cb_wfButton_i(Fl_Button*, void*) {
  wfButton->color(FL_YELLOW);
hwButton->color(FL_GRAY);
flButton->color(FL_GRAY);
smButton->color(FL_GRAY);
displayMode(VM_WIREFRAME);
hwButton->redraw();
flButton->redraw();
smButton->redraw();
}
void MainWin::cb_wfButton(Fl_Button* o, void* v) {
  ((MainWin*)(o->parent()->user_data()))->cb_wfButton_i(o,v);
}

static const char *idata_cube3[] = {
"32 32 -2 1",
" \300\300\300!\0\0\0",
"                                ",
"                                ",
"                                ",
"                                ",
"         !!!!!!!!!!!!!!!!!!!    ",
"        !!                !!    ",
"       ! !               ! !    ",
"      !  !              !  !    ",
"     !   !             !   !    ",
"    !    !            !    !    ",
"   !!!!!!!!!!!!!!!!!!!     !    ",
"   !     !           !     !    ",
"   !     !           !     !    ",
"   !     !           !     !    ",
"   !     !           !     !    ",
"   !     !           !     !    ",
"   !     !           !     !    ",
"   !     !           !     !    ",
"   !     !           !     !    ",
"   !     !           !     !    ",
"   !     !           !     !    ",
"   !     !!!!!!!!!!!!!!!!!!!    ",
"   !    !            !    !     ",
"   !   !             !   !      ",
"   !  !              !  !       ",
"   ! !               ! !        ",
"   !!                !!         ",
"   !!!!!!!!!!!!!!!!!!!          ",
"                                ",
"                                ",
"                                ",
"                                "
};
static Fl_Pixmap image_cube3(idata_cube3);

inline void MainWin::cb_rsButton_i(Fl_Button*, void*) {
  rsButton->color(FL_YELLOW);
rlButton->color(FL_GRAY);
rlButton->redraw();
viewer->controlMode = 0;
}
void MainWin::cb_rsButton(Fl_Button* o, void* v) {
  ((MainWin*)(o->parent()->user_data()))->cb_rsButton_i(o,v);
}

static const char *idata_rot[] = {
"32 32 -5 1",
" \300\300\300!\0\0\0\"kk\377#\261\261\377$\324\324\377",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"            !!!!!!!!!!!!!!!!!   ",
"           !$$$$$$$$$$$$$$$!!   ",
"          !$$$$$$$$$$$$$$$!\"!   ",
"         !$$$$$$$$$$$$$$$!\"\"!   ",
"        !$$$$$$$$$$$$$$$!\"\"\"!   ",
"       !!!!!!!!!!!!!!!!!\"\"\"\"!   ",
"       !###############!\"\"\"\"!   ",
"       !###############!\"\"\"\"!   ",
"    !  !###############!\"\"\"\"!   ",
"    !! !###############!\"\"\"\"!   ",
"  !!!!!!###############!\"\"\"!!!  ",
" !  !! !###############!\"\"\"\"! ! ",
"!   !  !###############!\"\"\"\"!  !",
"!      !###############!\"\"\"\"!  !",
" !     !###############!\"\"\"\"! ! ",
"  !!   !###############!\"\"\"\"!!  ",
"    !!!!!!!!##########!!!!!!    ",
"       !####!!!!!!!!!!#!\"\"!     ",
"       !###############!\"!      ",
"       !###############!!       ",
"       !!!!!!!!!!!!!!!!!        ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                "
};
static Fl_Pixmap image_rot(idata_rot);

inline void MainWin::cb_rlButton_i(Fl_Button*, void*) {
  rlButton->color(FL_YELLOW);
rsButton->color(FL_GRAY);
rsButton->redraw();
viewer->controlMode = 1;
}
void MainWin::cb_rlButton(Fl_Button* o, void* v) {
  ((MainWin*)(o->parent()->user_data()))->cb_rlButton_i(o,v);
}

static const char *idata_rot1[] = {
"32 32 -6 1",
" \300\300\300!\0\0\0\"\240\240\244#\377\373\360$\377\375\373%zzz",
"                                ",
"                                ",
"                                ",
"                                ",
"             !!!!!!             ",
"           !!######!!           ",
"          !##########!          ",
"         !######$$####!         ",
"         !#######$$###!         ",
"        !#########$$###!        ",
"        !##########$###!        ",
"        !##########$###!        ",
"        !##############!        ",
"    !    !############!         ",
"    !!   !############!         ",
"  !!!!!   !##########!     !!!  ",
" !  !!     !########!         ! ",
"!   !       !######!           !",
"!           !######!           !",
" !          !!!!!!!!          ! ",
"  !!        !%%%%\"\"!        !!  ",
"    !!!!!!! !\"\"\"\"\"\"! !!!!!!!    ",
"           !!!!!!!!!!           ",
"            !\"\"\"\"\"\"!            ",
"            !%%%%\"\"!            ",
"            !\"\"\"\"\"\"!            ",
"             !!!!!!             ",
"               !!               ",
"                                ",
"                                ",
"                                ",
"                                "
};
static Fl_Pixmap image_rot1(idata_rot1);

inline void MainWin::cb_modeTabs_i(Fl_Tabs*, void*) {
  int mode = 0;
if (modeTabs->value() == pointsTab)
  mode = 1;
setCurMode(mode);
}
void MainWin::cb_modeTabs(Fl_Tabs* o, void* v) {
  ((MainWin*)(o->parent()->user_data()))->cb_modeTabs_i(o,v);
}

inline void MainWin::cb_sliderSetB_i(Fl_Browser*, void*) {
  if (sliderSetB->value() > 0) {
  curFeature = sliderSetB->value()-1;
  resetFromCur();
  updateSliders();
};
}
void MainWin::cb_sliderSetB(Fl_Browser* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_sliderSetB_i(o,v);
}

inline void MainWin::cb_vs0_i(Fl_Value_Slider*, void*) {
  sliderCB();
}
void MainWin::cb_vs0(Fl_Value_Slider* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_vs0_i(o,v);
}

inline void MainWin::cb_vs1_i(Fl_Value_Slider*, void*) {
  sliderCB();
}
void MainWin::cb_vs1(Fl_Value_Slider* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_vs1_i(o,v);
}

inline void MainWin::cb_vs2_i(Fl_Value_Slider*, void*) {
  sliderCB();
}
void MainWin::cb_vs2(Fl_Value_Slider* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_vs2_i(o,v);
}

inline void MainWin::cb_vs3_i(Fl_Value_Slider*, void*) {
  sliderCB();
}
void MainWin::cb_vs3(Fl_Value_Slider* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_vs3_i(o,v);
}

inline void MainWin::cb_Average_i(Fl_Button*, void*) {
  resetToAverage();
updateSliders();
redrawV();
}
void MainWin::cb_Average(Fl_Button* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_Average_i(o,v);
}

inline void MainWin::cb_Random_i(Fl_Button*, void*) {
  resetToRandom();
updateSliders();
redrawV();
}
void MainWin::cb_Random(Fl_Button* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_Random_i(o,v);
}

inline void MainWin::cb_vs4_i(Fl_Value_Slider*, void*) {
  sliderCB();
}
void MainWin::cb_vs4(Fl_Value_Slider* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_vs4_i(o,v);
}

inline void MainWin::cb_vs5_i(Fl_Value_Slider*, void*) {
  sliderCB();
}
void MainWin::cb_vs5(Fl_Value_Slider* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_vs5_i(o,v);
}

inline void MainWin::cb_metricRB_i(Fl_Round_Button*, void*) {
  imperialRB->value(0);
resetFromCur();
updateSliders();
}
void MainWin::cb_metricRB(Fl_Round_Button* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_metricRB_i(o,v);
}

inline void MainWin::cb_imperialRB_i(Fl_Round_Button*, void*) {
  metricRB->value(0);
resetFromCur();
updateSliders();
}
void MainWin::cb_imperialRB(Fl_Round_Button* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_imperialRB_i(o,v);
}

inline void MainWin::cb_Clear_i(Fl_Button*, void*) {
  bodydemoClearPts();
}
void MainWin::cb_Clear(Fl_Button* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_i(o,v);
}

inline void MainWin::cb_conformVS_i(Fl_Value_Slider*, void*) {
  bodydemoSetConform(conformVS->value());
}
void MainWin::cb_conformVS(Fl_Value_Slider* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_conformVS_i(o,v);
}

inline void MainWin::cb_showConstCB_i(Fl_Check_Button*, void*) {
  showConstraints = showConstCB->value();
redrawV();
}
void MainWin::cb_showConstCB(Fl_Check_Button* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_showConstCB_i(o,v);
}

inline void MainWin::cb_showNormalsCB_i(Fl_Check_Button*, void*) {
  showNormals = showNormalsCB->value();
redrawV();
}
void MainWin::cb_showNormalsCB(Fl_Check_Button* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_showNormalsCB_i(o,v);
}

inline void MainWin::cb_showLinesCB_i(Fl_Check_Button*, void*) {
  showLines = showLinesCB->value();
redrawV();
}
void MainWin::cb_showLinesCB(Fl_Check_Button* o, void* v) {
  ((MainWin*)(o->parent()->parent()->parent()->user_data()))->cb_showLinesCB_i(o,v);
}

inline void MainWin::cb__i(Fl_Button*, void*) {
  char *fname = fl_file_chooser("Save mesh...", "*.obj", NULL);
if (fname) {
  bodydemoSaveMesh(fname);
};
}
void MainWin::cb_(Fl_Button* o, void* v) {
  ((MainWin*)(o->parent()->user_data()))->cb__i(o,v);
}

static const char *idata_save[] = {
"32 32 -6 1",
" \300\300\300!\377\0\0\"\331\331\331#kk\377$\0\0\0%\377\377\377",
"                                ",
"                                ",
"              $$$$$             ",
"              $!!!$             ",
"              $!!!$             ",
"  $$$$$$$$$$$$$!!!$$$$$$$$$$$$  ",
"  $##$%%%%%%%%$!!!$%%%%%%%$##$  ",
"  $##$%%%%%$$$$!!!$$$$%%%%$##$  ",
"  $##$%%%%%%$!!!!!!!$%%%%%$##$  ",
"  $##$%%%%%%%$!!!!!$%%%%%%$##$  ",
"  $##$%%%%%%%%$!!!$%%%%%%%$##$  ",
"  $##$%%%%%%%%%$!$%%%%%%%%$##$  ",
"  $##$%%%%%%%%%%$%%%%%%%%%$##$  ",
"  $##$%%%%%%%%%%%%%%%%%%%%$##$  ",
"  $##$%%%%%%%%%%%%%%%%%%%%$##$  ",
"  $##$%%%%%%%%%%%%%%%%%%%%$##$  ",
"  $##$$$$$$$$$$$$$$$$$$$$$$##$  ",
"  $##########################$  ",
"  $##########################$  ",
"  $##########################$  ",
"  $##########################$  ",
"  $##\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"#########$  ",
"  $##\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"#########$  ",
"  $##\"\"###\"\"\"\"\"\"\"\"\"\"#########$  ",
"  $##\"\"###\"\"\"\"\"\"\"\"\"\"#########$  ",
"  $##\"\"###\"\"\"\"\"\"\"\"\"\"#########$  ",
"  $##\"\"###\"\"\"\"\"\"\"\"\"\"#########$  ",
"  $##\"\"###\"\"\"\"\"\"\"\"\"\"#########$  ",
"  $##\"\"###\"\"\"\"\"\"\"\"\"\"#########$  ",
"   $#\"\"###\"\"\"\"\"\"\"\"\"\"#########$  ",
"    $$$$$$$$$$$$$$$$$$$$$$$$$$  ",
"                                "
};
static Fl_Pixmap image_save(idata_save);

MainWin::MainWin() {
  Fl_Window* w;
  { Fl_Window* o = window = new Fl_Window(698, 621, "Body Demo v0.91");
    w = o;
    o->user_data((void*)(this));
    { Viewer* o = viewer = new Viewer(235, 0, 460, 620, "viewer");
      o->box(FL_DOWN_BOX);
      o->color(49);
      o->selection_color(49);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(56);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(o);
    }
    { Fl_Check_Button* o = whiteCB = new Fl_Check_Button(95, 10, 25, 25, "White bkg");
      o->down_box(FL_DIAMOND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_whiteCB);
    }
    { Fl_Button* o = smButton = new Fl_Button(130, 50, 40, 40);
      o->color(3);
      o->image(image_cube);
      o->callback((Fl_Callback*)cb_smButton);
    }
    { Fl_Button* o = flButton = new Fl_Button(90, 50, 40, 40);
      o->image(image_cube1);
      o->callback((Fl_Callback*)cb_flButton);
    }
    { Fl_Button* o = hwButton = new Fl_Button(50, 50, 40, 40);
      o->image(image_cube2);
      o->callback((Fl_Callback*)cb_hwButton);
    }
    { Fl_Button* o = wfButton = new Fl_Button(10, 50, 40, 40);
      o->image(image_cube3);
      o->callback((Fl_Callback*)cb_wfButton);
    }
    { Fl_Button* o = rsButton = new Fl_Button(10, 5, 40, 40);
      o->color(3);
      o->image(image_rot);
      o->callback((Fl_Callback*)cb_rsButton);
    }
    { Fl_Button* o = rlButton = new Fl_Button(50, 5, 40, 40);
      o->image(image_rot1);
      o->callback((Fl_Callback*)cb_rlButton);
    }
    dataSetO = new Fl_Output(75, 95, 160, 25, "Data set:");
    { Fl_Tabs* o = modeTabs = new Fl_Tabs(0, 125, 235, 500);
      o->callback((Fl_Callback*)cb_modeTabs);
      { Fl_Group* o = new Fl_Group(0, 150, 235, 470, "Sliders");
        { Fl_Browser* o = sliderSetB = new Fl_Browser(5, 210, 215, 85, "Slider sets:");
          o->type(1);
          o->callback((Fl_Callback*)cb_sliderSetB);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = vs0 = new Fl_Value_Slider(5, 334, 225, 25, "val 0:");
          o->type(5);
          o->step(0.1);
          o->callback((Fl_Callback*)cb_vs0);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = vs1 = new Fl_Value_Slider(5, 379, 225, 25, "val 1:");
          o->type(5);
          o->step(0.1);
          o->callback((Fl_Callback*)cb_vs1);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = vs2 = new Fl_Value_Slider(5, 424, 225, 25, "val 2:");
          o->type(5);
          o->step(0.1);
          o->callback((Fl_Callback*)cb_vs2);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = vs3 = new Fl_Value_Slider(5, 469, 225, 25, "val 3:");
          o->type(5);
          o->step(0.1);
          o->callback((Fl_Callback*)cb_vs3);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Button* o = new Fl_Button(15, 155, 100, 35, "Average");
          o->callback((Fl_Callback*)cb_Average);
        }
        { Fl_Button* o = new Fl_Button(130, 155, 100, 35, "Random");
          o->callback((Fl_Callback*)cb_Random);
        }
        { Fl_Value_Slider* o = vs4 = new Fl_Value_Slider(5, 514, 225, 25, "val 4:");
          o->type(5);
          o->step(0.1);
          o->callback((Fl_Callback*)cb_vs4);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = vs5 = new Fl_Value_Slider(5, 559, 225, 25, "val 5:");
          o->type(5);
          o->step(0.1);
          o->callback((Fl_Callback*)cb_vs5);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Output* o = scoreVO = new Fl_Value_Output(105, 590, 50, 25, "Body likelihood:");
          o->maximum(10);
          o->step(0.1);
          o->value(10);
        }
        { Fl_Round_Button* o = metricRB = new Fl_Round_Button(90, 295, 25, 25, "Metric");
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_metricRB);
        }
        { Fl_Round_Button* o = imperialRB = new Fl_Round_Button(5, 295, 25, 25, "Imperial");
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_imperialRB);
        }
        o->end();
      }
      { Fl_Group* o = pointsTab = new Fl_Group(0, 150, 235, 470, "Points");
        o->hide();
        { Fl_Button* o = new Fl_Button(15, 280, 110, 25, "Clear points");
          o->callback((Fl_Callback*)cb_Clear);
        }
        { Fl_Text_Display* o = infoText = new Fl_Text_Display(10, 190, 215, 85);
          o->box(FL_NO_BOX);
          o->color(29);
        }
        { Fl_Value_Output* o = pScoreVO = new Fl_Value_Output(105, 590, 50, 25, "Body likelihood:");
          o->maximum(10);
          o->step(0.1);
          o->value(10);
        }
        { Fl_Value_Slider* o = conformVS = new Fl_Value_Slider(15, 340, 215, 25, "Conformity:");
          o->type(5);
          o->minimum(0.001);
          o->maximum(0.05);
          o->step(0.001);
          o->value(0.01);
          o->callback((Fl_Callback*)cb_conformVS);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Check_Button* o = showConstCB = new Fl_Check_Button(15, 375, 25, 25, "Show constraints");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_showConstCB);
        }
        { Fl_Check_Button* o = showNormalsCB = new Fl_Check_Button(15, 395, 25, 25, "Show normals");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_showNormalsCB);
        }
        { Fl_Check_Button* o = showLinesCB = new Fl_Check_Button(15, 415, 25, 25, "Show error lines");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_showLinesCB);
        }
        o->end();
      }
      o->end();
    }
    { Fl_Button* o = new Fl_Button(190, 50, 40, 40);
      o->image(image_save);
      o->callback((Fl_Callback*)cb_);
    }
    o->end();
  }
  viewer->mainWin = this;
}

void MainWin::viewerResize(int x, int y, bool video) {
  if (x < 0) {
 // ...
}
int newW = window->w() + x - viewer->w();
int newH = window->h() + y - viewer->h();
window->resize(window->x(), window->y(), newW, newH);
}

void MainWin::displayMode(int mode) {
  dispMode = mode;
//if (!lightingEnabled)
//	dispMode = dispMode & (~(VM_SURF_FLAT | VM_SURF_SMOOTH));
viewer->redraw();
}

void MainWin::sliderCB() {
  static float *f = NULL;
if (f == NULL) {
  f = new float[7];
}
if (imperialRB->value() == 1) {
f[0] = pow((1.0 / fCirc[curFeature].iMult[0]) * vs0->value(),1.0/fCirc[curFeature].power[0]);
f[1] = pow((1.0 / fCirc[curFeature].iMult[1]) * vs1->value(),1.0/fCirc[curFeature].power[1]);
f[2] = pow((1.0 / fCirc[curFeature].iMult[2]) * vs2->value(),1.0/fCirc[curFeature].power[2]);
f[3] = pow((1.0 / fCirc[curFeature].iMult[3]) * vs3->value(),1.0/fCirc[curFeature].power[3]);
f[4] = pow((1.0 / fCirc[curFeature].iMult[4]) * vs4->value(),1.0/fCirc[curFeature].power[4]);
f[5] = pow((1.0 / fCirc[curFeature].iMult[5]) * vs5->value(),1.0/fCirc[curFeature].power[5]);
}
else {
f[0] = pow((1.0 / fCirc[curFeature].mult[0]) * vs0->value(),1.0/fCirc[curFeature].power[0]);
f[1] = pow((1.0 / fCirc[curFeature].mult[1]) * vs1->value(),1.0/fCirc[curFeature].power[1]);
f[2] = pow((1.0 / fCirc[curFeature].mult[2]) * vs2->value(),1.0/fCirc[curFeature].power[2]);
f[3] = pow((1.0 / fCirc[curFeature].mult[3]) * vs3->value(),1.0/fCirc[curFeature].power[3]);
f[4] = pow((1.0 / fCirc[curFeature].mult[4]) * vs4->value(),1.0/fCirc[curFeature].power[4]);
f[5] = pow((1.0 / fCirc[curFeature].mult[5]) * vs5->value(),1.0/fCirc[curFeature].power[5]);
}

setFeatures(curFeature, f);
redrawV();
}

void MainWin::updateSliders() {
  int i = 0;
for (i=0; i < 6; i++) {
  Fl_Value_Slider *f;
  switch (i) {
    case 0: f = vs0; break;
    case 1: f = vs1; break;
    case 2: f = vs2; break;
    case 3: f = vs3; break;
    case 4: f = vs4; break;
    case 5: f = vs5; break;
   }
  if (fCirc[curFeature].numFeatures > i) {
    f->activate();
    if (imperialRB->value() == 1) {
      f->value(fCirc[curFeature].iMult[i] * pow(featureBase[i],fCirc[curFeature].power[i]));
      f->label(fCirc[curFeature].iName[i]);
      double factor = fCirc[curFeature].iMult[i] / fCirc[curFeature].mult[i];
      f->bounds(fCirc[curFeature].minV[i]*factor, fCirc[curFeature].maxV[i]*factor);
    }
    else {
      f->value(fCirc[curFeature].mult[i] * pow(featureBase[i],fCirc[curFeature].power[i]));
      f->label(fCirc[curFeature].name[i]);
      f->bounds(fCirc[curFeature].minV[i], fCirc[curFeature].maxV[i]);
    }
  }
  else {
    f->deactivate();
    f->label("");
    f->bounds(0, 1);
    f->value(0);
  }
}
}

void MainWin::updateSets() {
  dataSetO->value(setName);
sliderSetB->clear();
int i;
for (i=0; i < numFeatureMats; i++) {
  sliderSetB->add(fNames[i]);
}
sliderSetB->select(1);
}
