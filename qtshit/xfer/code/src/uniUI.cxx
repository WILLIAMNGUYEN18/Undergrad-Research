// generated by Fast Light User Interface Designer (fluid) version 1.0103

#include "uniUI.h"
#include "uMaster.h"
#include "uSkin.h"
#include "cli.h"
void updateSkel(PropUI *);

inline void UniUI::cb_Load_i(Fl_Button*, void*) {
  char *fname = fl_file_chooser("Load pose...", "*.po.txt", NULL);
if (fname) {
  ifstream in;
  if (!openIFStream(&in, fname, "pose")) {
    return;
  }
  skin.skel->loadPose(in);
  uUpdateFromSkel();
};
}
void UniUI::cb_Load(Fl_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

inline void UniUI::cb_Save_i(Fl_Button*, void*) {
  char *fname = fl_file_chooser("Save pose...", "*.po.txt", NULL);
if (fname) {
  ofstream out;
  if (!openOFStream(&out,fname, "pose file")){
    return;
  }
  skin.skel->savePose(out);
  out.close();
};
}
void UniUI::cb_Save(Fl_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

inline void UniUI::cb_showBrowser_i(Fl_Browser*, void*) {
  if (showTargetCB->value() == 0){
  uShow(showBrowser->value()-1);
  cout << "showing " << showBrowser->value()-1 << endl;
}
else
  uShow(-(showBrowser->value()-1));
}
void UniUI::cb_showBrowser(Fl_Browser* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_showBrowser_i(o,v);
}

inline void UniUI::cb_Update_i(Fl_Button*, void*) {
  showBrowser->clear();
int i;
for (i=0; i < dataSet.numExamples; i++) {
  showBrowser->add(dataSet.examples[i].fname);
}
sl1->value(curComps[0]);
sl2->value(curComps[1]);
sl3->value(curComps[2]);
sl4->value(curComps[3]);
sl5->value(curComps[4]);
sl6->value(curComps[5]);
sl7->value(curComps[6]);
sl8->value(curComps[7]);
sl9->value(curComps[8]);
sl10->value(curComps[9]);
}
void UniUI::cb_Update(Fl_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_Update_i(o,v);
}

inline void UniUI::cb_showTargetCB_i(Fl_Check_Button*, void*) {
  uShow(-visSkel);
if (!showTargetCB->value()) {
  uColor("");
};
}
void UniUI::cb_showTargetCB(Fl_Check_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_showTargetCB_i(o,v);
}

inline void UniUI::cb_Start_i(Fl_Button*, void*) {
  char cmd[256];
sprintf(cmd,"uEdgeMatchSolve %f %f 0 %f 10000",surfVI->value(),smoothVI->value(),markersVI->value());
processCommand(cmd);
}
void UniUI::cb_Start(Fl_Button* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_Start_i(o,v);
}

inline void UniUI::cb_Stop_i(Fl_Button*, void*) {
  processCommand("uEdgeMatchStopSolve");
}
void UniUI::cb_Stop(Fl_Button* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_Stop_i(o,v);
}

inline void UniUI::cb_showMarkersCB_i(Fl_Check_Button*, void*) {
  showMarkers = showMarkersCB->value() != 0;
redrawV();
}
void UniUI::cb_showMarkersCB(Fl_Check_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_showMarkersCB_i(o,v);
}

inline void UniUI::cb_Sliders_i(Fl_Button*, void*) {
  sliderWin->show();
}
void UniUI::cb_Sliders(Fl_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_Sliders_i(o,v);
}

inline void UniUI::cb_Mocap_i(Fl_Button*, void*) {
  mocapWin->show();
}
void UniUI::cb_Mocap(Fl_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_Mocap_i(o,v);
}

inline void UniUI::cb_Skinning_i(Fl_Button*, void*) {
  swWin->show();
}
void UniUI::cb_Skinning(Fl_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_Skinning_i(o,v);
}

inline void UniUI::cb_PDD_i(Fl_Button*, void*) {
  pddWin->show();
}
void UniUI::cb_PDD(Fl_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_PDD_i(o,v);
}

inline void UniUI::cb_nmNoneRB_i(Fl_Round_Button*, void*) {
  showTex = false;
redrawV();
}
void UniUI::cb_nmNoneRB(Fl_Round_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_nmNoneRB_i(o,v);
}

inline void UniUI::cb_nmSoftwareRB_i(Fl_Round_Button*, void*) {
  showTex = true;
softwareNM = true;
updateMesh();
redrawV();
}
void UniUI::cb_nmSoftwareRB(Fl_Round_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_nmSoftwareRB_i(o,v);
}

inline void UniUI::cb_nmHardwareRB_i(Fl_Round_Button*, void*) {
  showTex = true;
softwareNM = false;
redrawV();
}
void UniUI::cb_nmHardwareRB(Fl_Round_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_nmHardwareRB_i(o,v);
}

inline void UniUI::cb_Load1_i(Fl_Button*, void*) {
  char *fname = fl_file_chooser("Load mocap...", "*.{amc,csv,dof}", NULL);
if (fname) {
  mocapPoses.load(fname);
  frameVS->maximum(mocapPoses.numFrames-1);
};
}
void UniUI::cb_Load1(Fl_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_Load1_i(o,v);
}

inline void UniUI::cb_frameVS_i(Fl_Value_Slider*, void*) {
  mocapPoses.frameToSkel(frameVS->value(), skin.skel);
uShowComps();
}
void UniUI::cb_frameVS(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_frameVS_i(o,v);
}

inline void UniUI::cb_stepVS_i(Fl_Value_Slider*, void*) {
  frameVS->step((int)stepVS->value(),1);
}
void UniUI::cb_stepVS(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_stepVS_i(o,v);
}

inline void UniUI::cb_sl1_i(Fl_Value_Slider*, void*) {
  updateFromSliders();
}
void UniUI::cb_sl1(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_sl1_i(o,v);
}

inline void UniUI::cb_sl2_i(Fl_Value_Slider*, void*) {
  updateFromSliders();
}
void UniUI::cb_sl2(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_sl2_i(o,v);
}

inline void UniUI::cb_sl3_i(Fl_Value_Slider*, void*) {
  updateFromSliders();
}
void UniUI::cb_sl3(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_sl3_i(o,v);
}

inline void UniUI::cb_sl4_i(Fl_Value_Slider*, void*) {
  updateFromSliders();
}
void UniUI::cb_sl4(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_sl4_i(o,v);
}

inline void UniUI::cb_sl5_i(Fl_Value_Slider*, void*) {
  updateFromSliders();
}
void UniUI::cb_sl5(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_sl5_i(o,v);
}

inline void UniUI::cb_sl6_i(Fl_Value_Slider*, void*) {
  updateFromSliders();
}
void UniUI::cb_sl6(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_sl6_i(o,v);
}

inline void UniUI::cb_sl7_i(Fl_Value_Slider*, void*) {
  updateFromSliders();
}
void UniUI::cb_sl7(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_sl7_i(o,v);
}

inline void UniUI::cb_sl8_i(Fl_Value_Slider*, void*) {
  updateFromSliders();
}
void UniUI::cb_sl8(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_sl8_i(o,v);
}

inline void UniUI::cb_sl9_i(Fl_Value_Slider*, void*) {
  updateFromSliders();
}
void UniUI::cb_sl9(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_sl9_i(o,v);
}

inline void UniUI::cb_sl10_i(Fl_Value_Slider*, void*) {
  updateFromSliders();
}
void UniUI::cb_sl10(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->parent()->user_data()))->cb_sl10_i(o,v);
}

inline void UniUI::cb_bTransforms_i(Fl_Browser*, void*) {
  if (bTransforms->value() > 0) {
  spTransform = bTransforms->value() - 1;
  char s[80];
  sprintf(s, "%d", spTransform);
  uColor(s);
};
}
void UniUI::cb_bTransforms(Fl_Browser* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_bTransforms_i(o,v);
}

inline void UniUI::cb_rNoPaint_i(Fl_Round_Button*, void*) {
  spMode = 0;
}
void UniUI::cb_rNoPaint(Fl_Round_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_rNoPaint_i(o,v);
}

inline void UniUI::cb_rPaint_i(Fl_Round_Button*, void*) {
  spMode = 1;
updateSPDisplay();
}
void UniUI::cb_rPaint(Fl_Round_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_rPaint_i(o,v);
}

inline void UniUI::cb_vsWeight_i(Fl_Value_Slider*, void*) {
  spIntensity = vsWeight->value();
}
void UniUI::cb_vsWeight(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_vsWeight_i(o,v);
}

inline void UniUI::cb_vsInnerRadius_i(Fl_Value_Slider*, void*) {
  spInnerRadius = vsInnerRadius->value();
}
void UniUI::cb_vsInnerRadius(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_vsInnerRadius_i(o,v);
}

inline void UniUI::cb_vsOuterRadius_i(Fl_Value_Slider*, void*) {
  spOuterRadius = vsOuterRadius->value();
}
void UniUI::cb_vsOuterRadius(Fl_Value_Slider* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_vsOuterRadius_i(o,v);
}

inline void UniUI::cb_rPaintG_i(Fl_Round_Button*, void*) {
  spMode = 2;
updateSPDisplay();
}
void UniUI::cb_rPaintG(Fl_Round_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_rPaintG_i(o,v);
}

inline void UniUI::cb_rPaintL_i(Fl_Round_Button*, void*) {
  spMode = 3;
updateSPDisplay();
}
void UniUI::cb_rPaintL(Fl_Round_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_rPaintL_i(o,v);
}

inline void UniUI::cb_rSmooth_i(Fl_Round_Button*, void*) {
  spMode = 4;
updateSPDisplay();
}
void UniUI::cb_rSmooth(Fl_Round_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_rSmooth_i(o,v);
}

inline void UniUI::cb_Save1_i(Fl_Button*, void*) {
  processCommand("uSaveWeights data/weights.dat");
}
void UniUI::cb_Save1(Fl_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

inline void UniUI::cb_spGeodesicCB_i(Fl_Check_Button*, void*) {
  spGeodesic = spGeodesicCB->value() != 0;
}
void UniUI::cb_spGeodesicCB(Fl_Check_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_spGeodesicCB_i(o,v);
}

inline void UniUI::cb_spAutoExtendCB_i(Fl_Check_Button*, void*) {
  spAutoExtend = spAutoExtendCB->value() != 0;
}
void UniUI::cb_spAutoExtendCB(Fl_Check_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_spAutoExtendCB_i(o,v);
}

inline void UniUI::cb_spAutoUpdateCB_i(Fl_Check_Button*, void*) {
  spAutoUpdate = spAutoUpdateCB->value() != 0;
}
void UniUI::cb_spAutoUpdateCB(Fl_Check_Button* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_spAutoUpdateCB_i(o,v);
}

inline void UniUI::cb_pddJointTI_i(Fl_Input*, void*) {
  setPDDWJoint(pddJointTI->value());
}
void UniUI::cb_pddJointTI(Fl_Input* o, void* v) {
  ((UniUI*)(o->parent()->user_data()))->cb_pddJointTI_i(o,v);
}

UniUI::UniUI() {
  Fl_Window* w;
  { Fl_Window* o = uWindow = new Fl_Window(664, 497, "Uni");
    w = o;
    o->user_data((void*)(this));
    { Fl_Scroll* o = skelScroll = new Fl_Scroll(5, 5, 650, 245);
      o->type(1);
      o->box(FL_DOWN_BOX);
      o->end();
    }
    { Fl_Button* o = new Fl_Button(10, 265, 85, 25, "Load pose...");
      o->callback((Fl_Callback*)cb_Load);
    }
    { Fl_Button* o = new Fl_Button(100, 265, 85, 25, "Save pose...");
      o->callback((Fl_Callback*)cb_Save);
    }
    { Fl_Browser* o = showBrowser = new Fl_Browser(30, 295, 185, 200);
      o->type(2);
      o->callback((Fl_Callback*)cb_showBrowser);
    }
    { Fl_Button* o = new Fl_Button(220, 315, 85, 25, "Update");
      o->callback((Fl_Callback*)cb_Update);
    }
    { Fl_Check_Button* o = showTargetCB = new Fl_Check_Button(220, 345, 25, 25, "Show target");
      o->down_box(FL_DOWN_BOX);
      o->callback((Fl_Callback*)cb_showTargetCB);
    }
    { Fl_Group* o = new Fl_Group(340, 260, 310, 85);
      o->box(FL_DOWN_FRAME);
      surfVI = new Fl_Value_Input(435, 265, 50, 25, "Surface:");
      smoothVI = new Fl_Value_Input(435, 290, 50, 25, "Smoothness:");
      markersVI = new Fl_Value_Input(435, 315, 50, 25, "Markers:");
      { Fl_Button* o = new Fl_Button(510, 270, 100, 25, "Start");
        o->callback((Fl_Callback*)cb_Start);
      }
      { Fl_Button* o = new Fl_Button(510, 300, 100, 25, "Stop");
        o->callback((Fl_Callback*)cb_Stop);
      }
      o->end();
    }
    { Fl_Check_Button* o = showMarkersCB = new Fl_Check_Button(340, 355, 25, 25, "Show markers");
      o->down_box(FL_DOWN_BOX);
      o->callback((Fl_Callback*)cb_showMarkersCB);
    }
    { Fl_Button* o = new Fl_Button(345, 435, 115, 25, "Sliders...");
      o->callback((Fl_Callback*)cb_Sliders);
    }
    { Fl_Button* o = new Fl_Button(345, 405, 115, 25, "Mocap...");
      o->callback((Fl_Callback*)cb_Mocap);
    }
    { Fl_Button* o = new Fl_Button(470, 405, 125, 25, "Skinning weights...");
      o->callback((Fl_Callback*)cb_Skinning);
    }
    { Fl_Button* o = new Fl_Button(470, 435, 125, 25, "PDD weights...");
      o->callback((Fl_Callback*)cb_PDD);
    }
    { Fl_Round_Button* o = nmNoneRB = new Fl_Round_Button(220, 390, 25, 25, "No normal maps");
      o->type(102);
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_nmNoneRB);
    }
    { Fl_Round_Button* o = nmSoftwareRB = new Fl_Round_Button(220, 410, 25, 25, "Software NMs");
      o->type(102);
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_nmSoftwareRB);
    }
    { Fl_Round_Button* o = nmHardwareRB = new Fl_Round_Button(220, 430, 25, 25, "Hardware NMs");
      o->type(102);
      o->down_box(FL_ROUND_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)cb_nmHardwareRB);
    }
    o->end();
  }
  name="Uni";
  { Fl_Window* o = mocapWin = new Fl_Window(479, 124, "Mocap");
    w = o;
    o->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(10, 10, 85, 25, "Load...");
      o->callback((Fl_Callback*)cb_Load1);
    }
    { Fl_Value_Slider* o = frameVS = new Fl_Value_Slider(10, 60, 460, 25, "Frame:");
      o->type(5);
      o->step(1);
      o->callback((Fl_Callback*)cb_frameVS);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Value_Slider* o = stepVS = new Fl_Value_Slider(335, 20, 130, 25, "Step:");
      o->type(5);
      o->minimum(1);
      o->maximum(10);
      o->step(1);
      o->value(1);
      o->callback((Fl_Callback*)cb_stepVS);
      o->align(FL_ALIGN_LEFT);
    }
    o->end();
  }
  { Fl_Window* o = sliderWin = new Fl_Window(345, 378, "Sliders");
    w = o;
    o->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(10, 10, 325, 305);
      o->box(FL_DOWN_FRAME);
      { Fl_Value_Slider* o = sl1 = new Fl_Value_Slider(30, 20, 275, 25, "1");
        o->type(5);
        o->minimum(-2);
        o->maximum(2);
        o->value(1);
        o->callback((Fl_Callback*)cb_sl1);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Slider* o = sl2 = new Fl_Value_Slider(30, 50, 275, 25, "2");
        o->type(5);
        o->minimum(-2);
        o->maximum(2);
        o->callback((Fl_Callback*)cb_sl2);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Slider* o = sl3 = new Fl_Value_Slider(30, 80, 275, 25, "3");
        o->type(5);
        o->minimum(-2);
        o->maximum(2);
        o->callback((Fl_Callback*)cb_sl3);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Slider* o = sl4 = new Fl_Value_Slider(30, 110, 275, 25, "4");
        o->type(5);
        o->minimum(-2);
        o->maximum(2);
        o->callback((Fl_Callback*)cb_sl4);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Slider* o = sl5 = new Fl_Value_Slider(30, 140, 275, 25, "5");
        o->type(5);
        o->minimum(-2);
        o->maximum(2);
        o->callback((Fl_Callback*)cb_sl5);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Slider* o = sl6 = new Fl_Value_Slider(30, 170, 275, 25, "6");
        o->type(5);
        o->minimum(-2);
        o->maximum(2);
        o->callback((Fl_Callback*)cb_sl6);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Slider* o = sl7 = new Fl_Value_Slider(30, 200, 275, 25, "7");
        o->type(5);
        o->minimum(-2);
        o->maximum(2);
        o->callback((Fl_Callback*)cb_sl7);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Slider* o = sl8 = new Fl_Value_Slider(30, 230, 275, 25, "8");
        o->type(5);
        o->minimum(-2);
        o->maximum(2);
        o->callback((Fl_Callback*)cb_sl8);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Slider* o = sl9 = new Fl_Value_Slider(30, 260, 275, 25, "9");
        o->type(5);
        o->minimum(-2);
        o->maximum(2);
        o->callback((Fl_Callback*)cb_sl9);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Slider* o = sl10 = new Fl_Value_Slider(30, 290, 275, 25, "10");
        o->type(5);
        o->minimum(-2);
        o->maximum(2);
        o->callback((Fl_Callback*)cb_sl10);
        o->align(FL_ALIGN_LEFT);
      }
      o->end();
    }
    o->end();
  }
  { Fl_Window* o = swWin = new Fl_Window(401, 347, "Skinning weights");
    w = o;
    o->user_data((void*)(this));
    { Fl_Browser* o = bTransforms = new Fl_Browser(145, 25, 245, 150, "Transforms:");
      o->type(2);
      o->callback((Fl_Callback*)cb_bTransforms);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Round_Button* o = rNoPaint = new Fl_Round_Button(5, 15, 25, 25, "No painting");
      o->type(102);
      o->down_box(FL_ROUND_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)cb_rNoPaint);
    }
    { Fl_Round_Button* o = rPaint = new Fl_Round_Button(5, 35, 25, 25, "Paint");
      o->type(102);
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_rPaint);
    }
    { Fl_Value_Slider* o = vsWeight = new Fl_Value_Slider(70, 185, 315, 25, "Weight:");
      o->type(1);
      o->value(1);
      o->callback((Fl_Callback*)cb_vsWeight);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = vsInnerRadius = new Fl_Value_Slider(70, 215, 315, 25, "Inner rad:");
      o->type(1);
      o->maximum(0.2);
      o->step(0.005);
      o->value(0.01);
      o->callback((Fl_Callback*)cb_vsInnerRadius);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = vsOuterRadius = new Fl_Value_Slider(70, 245, 315, 25, "Outer rad:");
      o->type(1);
      o->maximum(0.2);
      o->step(0.005);
      o->value(0.01);
      o->callback((Fl_Callback*)cb_vsOuterRadius);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Round_Button* o = rPaintG = new Fl_Round_Button(5, 55, 25, 25, "Paint if greater");
      o->type(102);
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_rPaintG);
    }
    { Fl_Round_Button* o = rPaintL = new Fl_Round_Button(5, 75, 25, 25, "Paint if less");
      o->type(102);
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_rPaintL);
    }
    { Fl_Round_Button* o = rSmooth = new Fl_Round_Button(5, 95, 25, 25, "Smooth");
      o->type(102);
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_rSmooth);
    }
    { Fl_Button* o = new Fl_Button(10, 290, 115, 25, "Save weights");
      o->callback((Fl_Callback*)cb_Save1);
    }
    { Fl_Check_Button* o = spGeodesicCB = new Fl_Check_Button(175, 275, 25, 25, "Geodesic");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)cb_spGeodesicCB);
    }
    { Fl_Check_Button* o = spAutoExtendCB = new Fl_Check_Button(175, 295, 25, 25, "Auto-extend");
      o->down_box(FL_DOWN_BOX);
      o->callback((Fl_Callback*)cb_spAutoExtendCB);
    }
    { Fl_Check_Button* o = spAutoUpdateCB = new Fl_Check_Button(175, 315, 25, 25, "Auto-update");
      o->down_box(FL_DOWN_BOX);
      o->callback((Fl_Callback*)cb_spAutoUpdateCB);
    }
    o->end();
  }
  { Fl_Window* o = pddWin = new Fl_Window(375, 256, "PDD weights");
    w = o;
    o->user_data((void*)(this));
    { Fl_Value_Slider* o = pdd0VS = new Fl_Value_Slider(10, 55, 355, 25, "PDD 0:");
      o->type(1);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Value_Slider* o = pdd1VS = new Fl_Value_Slider(10, 100, 355, 25, "PDD 1:");
      o->type(1);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Value_Slider* o = pdd2VS = new Fl_Value_Slider(10, 145, 355, 25, "PDD 2:");
      o->type(1);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Value_Slider* o = pdd3VS = new Fl_Value_Slider(10, 190, 355, 25, "PDD 3:");
      o->type(1);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Input* o = pddJointTI = new Fl_Input(45, 10, 140, 25, "Joint:");
      o->callback((Fl_Callback*)cb_pddJointTI);
      o->when(FL_WHEN_ENTER_KEY);
    }
    o->end();
  }
}

void UniUI::show() {
  uWindow->show();
}

void UniUI::initSkel(Skeleton *skel) {
  PObject *obj = new PObject(skel);
obj->create("USkeleton", 5, 5, skelScroll);
obj->editCB = updateSkel;
}

void UniUI::updateFromSliders() {
  curComps[0] = sl1->value();
curComps[1] = sl2->value();
curComps[2] = sl3->value();
curComps[3] = sl4->value();
curComps[4] = sl5->value();
curComps[5] = sl6->value();
curComps[6] = sl7->value();
curComps[7] = sl8->value();
curComps[8] = sl9->value();
curComps[9] = sl10->value();

uShowComps();
}

void UniUI::updateSPDisplay() {
  if (bTransforms->size() == 0) {
  int i;
  for (i=0; i < skin.skel->transforms.size(); i++) {
    bTransforms->add(skin.skel->transforms.getT(i)->name);
  }
}
}
