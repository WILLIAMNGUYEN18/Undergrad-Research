// generated by Fast Light User Interface Designer (fluid) version 1.0103

#ifndef uniUI_h
#define uniUI_h
#include <FL/Fl.H>
#include "doppel2.h"
#include "skeleton.h"
#include "propui.h"
extern void updateSkel(PropUI *);
#include <FL/Fl_Window.H>
#include "tool.h"
#include "Fl/fl_file_chooser.h"
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Input.H>

class UniUI : public Tool {
public:
  UniUI();
  Fl_Window *uWindow;
  Fl_Scroll *skelScroll;
private:
  inline void cb_Load_i(Fl_Button*, void*);
  static void cb_Load(Fl_Button*, void*);
  inline void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
public:
  Fl_Browser *showBrowser;
private:
  inline void cb_showBrowser_i(Fl_Browser*, void*);
  static void cb_showBrowser(Fl_Browser*, void*);
  inline void cb_Update_i(Fl_Button*, void*);
  static void cb_Update(Fl_Button*, void*);
public:
  Fl_Check_Button *showTargetCB;
private:
  inline void cb_showTargetCB_i(Fl_Check_Button*, void*);
  static void cb_showTargetCB(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *surfVI;
  Fl_Value_Input *smoothVI;
  Fl_Value_Input *markersVI;
private:
  inline void cb_Start_i(Fl_Button*, void*);
  static void cb_Start(Fl_Button*, void*);
  inline void cb_Stop_i(Fl_Button*, void*);
  static void cb_Stop(Fl_Button*, void*);
public:
  Fl_Check_Button *showMarkersCB;
private:
  inline void cb_showMarkersCB_i(Fl_Check_Button*, void*);
  static void cb_showMarkersCB(Fl_Check_Button*, void*);
  inline void cb_Sliders_i(Fl_Button*, void*);
  static void cb_Sliders(Fl_Button*, void*);
  inline void cb_Mocap_i(Fl_Button*, void*);
  static void cb_Mocap(Fl_Button*, void*);
  inline void cb_Skinning_i(Fl_Button*, void*);
  static void cb_Skinning(Fl_Button*, void*);
  inline void cb_PDD_i(Fl_Button*, void*);
  static void cb_PDD(Fl_Button*, void*);
public:
  Fl_Round_Button *nmNoneRB;
private:
  inline void cb_nmNoneRB_i(Fl_Round_Button*, void*);
  static void cb_nmNoneRB(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *nmSoftwareRB;
private:
  inline void cb_nmSoftwareRB_i(Fl_Round_Button*, void*);
  static void cb_nmSoftwareRB(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *nmHardwareRB;
private:
  inline void cb_nmHardwareRB_i(Fl_Round_Button*, void*);
  static void cb_nmHardwareRB(Fl_Round_Button*, void*);
public:
  Fl_Window *mocapWin;
private:
  inline void cb_Load1_i(Fl_Button*, void*);
  static void cb_Load1(Fl_Button*, void*);
public:
  Fl_Value_Slider *frameVS;
private:
  inline void cb_frameVS_i(Fl_Value_Slider*, void*);
  static void cb_frameVS(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *stepVS;
private:
  inline void cb_stepVS_i(Fl_Value_Slider*, void*);
  static void cb_stepVS(Fl_Value_Slider*, void*);
public:
  Fl_Window *sliderWin;
  Fl_Value_Slider *sl1;
private:
  inline void cb_sl1_i(Fl_Value_Slider*, void*);
  static void cb_sl1(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sl2;
private:
  inline void cb_sl2_i(Fl_Value_Slider*, void*);
  static void cb_sl2(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sl3;
private:
  inline void cb_sl3_i(Fl_Value_Slider*, void*);
  static void cb_sl3(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sl4;
private:
  inline void cb_sl4_i(Fl_Value_Slider*, void*);
  static void cb_sl4(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sl5;
private:
  inline void cb_sl5_i(Fl_Value_Slider*, void*);
  static void cb_sl5(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sl6;
private:
  inline void cb_sl6_i(Fl_Value_Slider*, void*);
  static void cb_sl6(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sl7;
private:
  inline void cb_sl7_i(Fl_Value_Slider*, void*);
  static void cb_sl7(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sl8;
private:
  inline void cb_sl8_i(Fl_Value_Slider*, void*);
  static void cb_sl8(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sl9;
private:
  inline void cb_sl9_i(Fl_Value_Slider*, void*);
  static void cb_sl9(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sl10;
private:
  inline void cb_sl10_i(Fl_Value_Slider*, void*);
  static void cb_sl10(Fl_Value_Slider*, void*);
public:
  Fl_Window *swWin;
  Fl_Browser *bTransforms;
private:
  inline void cb_bTransforms_i(Fl_Browser*, void*);
  static void cb_bTransforms(Fl_Browser*, void*);
public:
  Fl_Round_Button *rNoPaint;
private:
  inline void cb_rNoPaint_i(Fl_Round_Button*, void*);
  static void cb_rNoPaint(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rPaint;
private:
  inline void cb_rPaint_i(Fl_Round_Button*, void*);
  static void cb_rPaint(Fl_Round_Button*, void*);
public:
  Fl_Value_Slider *vsWeight;
private:
  inline void cb_vsWeight_i(Fl_Value_Slider*, void*);
  static void cb_vsWeight(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vsInnerRadius;
private:
  inline void cb_vsInnerRadius_i(Fl_Value_Slider*, void*);
  static void cb_vsInnerRadius(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *vsOuterRadius;
private:
  inline void cb_vsOuterRadius_i(Fl_Value_Slider*, void*);
  static void cb_vsOuterRadius(Fl_Value_Slider*, void*);
public:
  Fl_Round_Button *rPaintG;
private:
  inline void cb_rPaintG_i(Fl_Round_Button*, void*);
  static void cb_rPaintG(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rPaintL;
private:
  inline void cb_rPaintL_i(Fl_Round_Button*, void*);
  static void cb_rPaintL(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rSmooth;
private:
  inline void cb_rSmooth_i(Fl_Round_Button*, void*);
  static void cb_rSmooth(Fl_Round_Button*, void*);
  inline void cb_Save1_i(Fl_Button*, void*);
  static void cb_Save1(Fl_Button*, void*);
public:
  Fl_Check_Button *spGeodesicCB;
private:
  inline void cb_spGeodesicCB_i(Fl_Check_Button*, void*);
  static void cb_spGeodesicCB(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *spAutoExtendCB;
private:
  inline void cb_spAutoExtendCB_i(Fl_Check_Button*, void*);
  static void cb_spAutoExtendCB(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *spAutoUpdateCB;
private:
  inline void cb_spAutoUpdateCB_i(Fl_Check_Button*, void*);
  static void cb_spAutoUpdateCB(Fl_Check_Button*, void*);
public:
  Fl_Window *pddWin;
  Fl_Value_Slider *pdd0VS;
  Fl_Value_Slider *pdd1VS;
  Fl_Value_Slider *pdd2VS;
  Fl_Value_Slider *pdd3VS;
  Fl_Input *pddJointTI;
private:
  inline void cb_pddJointTI_i(Fl_Input*, void*);
  static void cb_pddJointTI(Fl_Input*, void*);
public:
  void show();
  virtual void drawGL();
  void initSkel(Skeleton *skel);
  void updateFromSliders();
  virtual bool startDragGL(GLuint *nameBuf, int x, int y);
  virtual void dragGL(int x, int y);
  void updateSPDisplay();
};
#endif
