// generated by Fast Light User Interface Designer (fluid) version 1.0103

#include "cvUI.h"
#include "charVec.h"
#include "cli.h"
#include "skeleton.h"
#include "cvgf.h"
#include "trimesh.h"
#include "trimesh_render.h"
#include "skinCalc.h"
#include "surfaceDef.h"
#include "markers.h"
#include "vl/VLd.h"
extern CharVec charVec;
extern CVGoalFunction *cvGF;
extern TriMesh *matchMeshes;
extern Skeleton *matchPoses;
extern Skin curSkin, scSkin;
#include "cvMaster.h"
class CVUI;
extern CVUI *cvUI;
extern LADeformationGoalFunction *matchGF;
TriMesh *meshToRender;

inline void CVUI::cb_showCV_i(Fl_Round_Button*, void*) {
  charVec.vis = (showCV->value() != 0);
redrawV();
}
void CVUI::cb_showCV(Fl_Round_Button* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_showCV_i(o,v);
}

inline void CVUI::cb_exampleB_i(Fl_Browser*, void*) {
  if (showSelEx->value() != 0)
  redrawV();
}
void CVUI::cb_exampleB(Fl_Browser* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_exampleB_i(o,v);
}

inline void CVUI::cb_showSelEx_i(Fl_Round_Button*, void*) {
  redrawV();
}
void CVUI::cb_showSelEx(Fl_Round_Button* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_showSelEx_i(o,v);
}

inline void CVUI::cb_Update_i(Fl_Button*, void*) {
  updateExampleB();
}
void CVUI::cb_Update(Fl_Button* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_Update_i(o,v);
}

inline void CVUI::cb_comp0VS_i(Fl_Value_Slider*, void*) {
  setComponents();
}
void CVUI::cb_comp0VS(Fl_Value_Slider* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_comp0VS_i(o,v);
}

inline void CVUI::cb_comp1VS_i(Fl_Value_Slider*, void*) {
  setComponents();
}
void CVUI::cb_comp1VS(Fl_Value_Slider* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_comp1VS_i(o,v);
}

inline void CVUI::cb_Edit_i(Fl_Button*, void*) {
  showSkel();
}
void CVUI::cb_Edit(Fl_Button* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_Edit_i(o,v);
}

inline void CVUI::cb_Copy_i(Fl_Button*, void*) {
  int i;
for (i=1; i <= exampleB->size(); i++) {
 if (exampleB->selected(i) && i-1 < cvGF->numExamples) {
   int j;
   for (j=0; j < charVec.numPts; j++) {
    charVec.tm->getPt(j) =cvGF->examples[i-1].trans[j]* cvGF->examples[i-1].points[j];
    charVec.tm->getPtColor(j) = Vec3d(1,1,1);
    charVec.tm->getPtColor(j)[1] = cvGF->examples[i-1].conf[j];
   }
   charVec.tm->calcNormals();
   break;
 }
};
}
void CVUI::cb_Copy(Fl_Button* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_Copy_i(o,v);
}

inline void CVUI::cb_showMarkers_i(Fl_Round_Button*, void*) {
  redrawV();
}
void CVUI::cb_showMarkers(Fl_Round_Button* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_showMarkers_i(o,v);
}

inline void CVUI::cb_comp2VS_i(Fl_Value_Slider*, void*) {
  setComponents();
}
void CVUI::cb_comp2VS(Fl_Value_Slider* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_comp2VS_i(o,v);
}

inline void CVUI::cb_comp3VS_i(Fl_Value_Slider*, void*) {
  setComponents();
}
void CVUI::cb_comp3VS(Fl_Value_Slider* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_comp3VS_i(o,v);
}

inline void CVUI::cb_comp4VS_i(Fl_Value_Slider*, void*) {
  setComponents();
}
void CVUI::cb_comp4VS(Fl_Value_Slider* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_comp4VS_i(o,v);
}

inline void CVUI::cb_comp5VS_i(Fl_Value_Slider*, void*) {
  setComponents();
}
void CVUI::cb_comp5VS(Fl_Value_Slider* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_comp5VS_i(o,v);
}

inline void CVUI::cb_Set_i(Fl_Button*, void*) {
  int i;
for (i=1; i <= exampleB->size(); i++) {
 if (exampleB->selected(i) && i-1 < cvGF->numExamples) {
   if (cvGF->cv->numComponents > 1)
    comp0VS->value(cvGF->curMu[cvGF->examples[i-1].charID][1]);
   if (cvGF->cv->numComponents > 2)
    comp1VS->value(cvGF->curMu[cvGF->examples[i-1].charID][2]);
   if (cvGF->cv->numComponents > 3)
    comp2VS->value(cvGF->curMu[cvGF->examples[i-1].charID][3]);
   if (cvGF->cv->numComponents > 4)
    comp3VS->value(cvGF->curMu[cvGF->examples[i-1].charID][4]);
   if (cvGF->cv->numComponents > 5)
    comp4VS->value(cvGF->curMu[cvGF->examples[i-1].charID][5]);
   if (cvGF->cv->numComponents > 6)
    comp5VS->value(cvGF->curMu[cvGF->examples[i-1].charID][6]);
   setComponents();
   break;
 }
};
}
void CVUI::cb_Set(Fl_Button* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_Set_i(o,v);
}

inline void CVUI::cb_Set1_i(Fl_Button*, void*) {
  int i;
for (i=1; i <= exampleB->size(); i++) {
 if (exampleB->selected(i) && i-1 < cvGF->numExamples) {

charVec.updateCurComponents(cvGF->examples[i-1].dofs);
charVec.updateLocalPos(cvGF->curMu[cvGF->examples[i-1].charID].Ref());
charVec.updateTM(cvGF->examples[i-1].trans);
   break;
 }
};
}
void CVUI::cb_Set1(Fl_Button* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_Set1_i(o,v);
}

inline void CVUI::cb_Load_i(Fl_Button*, void*) {
  char *fname = fl_file_chooser("Load pose...", "*.po.txt", NULL);
if (fname) {
  ifstream in;
  if (!openIFStream(&in, fname, "pose")) {
    return;
  }
  charVec.skel->loadPose(in);
};
}
void CVUI::cb_Load(Fl_Button* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

inline void CVUI::cb_Save_i(Fl_Button*, void*) {
  char *fname = fl_file_chooser("Save pose...", "*.po.txt", NULL);
//if (fname)
//  savePose(fname);
}
void CVUI::cb_Save(Fl_Button* o, void* v) {
  ((CVUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

CVUI::CVUI() {
  Fl_Window* w;
  { Fl_Window* o = cvWindow = new Fl_Window(380, 522, "CharVec");
    w = o;
    o->user_data((void*)(this));
    { Fl_Round_Button* o = showCV = new Fl_Round_Button(15, 15, 25, 25, "show current CharVec");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_showCV);
    }
    { Fl_Browser* o = exampleB = new Fl_Browser(15, 60, 240, 85, "Examples");
      o->type(3);
      o->callback((Fl_Callback*)cb_exampleB);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Round_Button* o = showSelEx = new Fl_Round_Button(15, 150, 25, 25, "show selected example");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_showSelEx);
    }
    { Fl_Button* o = new Fl_Button(260, 90, 80, 25, "Update");
      o->callback((Fl_Callback*)cb_Update);
    }
    { Fl_Value_Slider* o = comp0VS = new Fl_Value_Slider(70, 260, 295, 25, "Comp #0");
      o->type(1);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_comp0VS);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = comp1VS = new Fl_Value_Slider(70, 285, 295, 25, "Comp #1");
      o->type(1);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_comp1VS);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Button* o = new Fl_Button(105, 205, 120, 25, "Edit Skeleton");
      o->callback((Fl_Callback*)cb_Edit);
    }
    { Fl_Button* o = new Fl_Button(260, 120, 80, 25, "Copy to CV");
      o->callback((Fl_Callback*)cb_Copy);
    }
    { Fl_Round_Button* o = showMarkers = new Fl_Round_Button(210, 15, 25, 25, "show marker matches");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_showMarkers);
    }
    { Fl_Value_Slider* o = comp2VS = new Fl_Value_Slider(70, 310, 295, 25, "Comp #2");
      o->type(1);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_comp2VS);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = comp3VS = new Fl_Value_Slider(70, 335, 295, 25, "Comp #3");
      o->type(1);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_comp3VS);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = comp4VS = new Fl_Value_Slider(70, 360, 295, 25, "Comp #4");
      o->type(1);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_comp4VS);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = comp5VS = new Fl_Value_Slider(70, 385, 295, 25, "Comp #5");
      o->type(1);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_comp5VS);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Button* o = new Fl_Button(260, 150, 80, 25, "Set comps");
      o->callback((Fl_Callback*)cb_Set);
    }
    { Fl_Button* o = new Fl_Button(260, 180, 80, 25, "Set skeleton");
      o->callback((Fl_Callback*)cb_Set1);
    }
    o->end();
  }
  name="CharVec";
meshToRender = NULL;
  { Fl_Window* o = skelWindow = new Fl_Window(1039, 373, "Skels");
    w = o;
    o->user_data((void*)(this));
    { Fl_Scroll* o = skelScroll = new Fl_Scroll(0, 0, 1035, 340);
      o->type(1);
      o->box(FL_DOWN_BOX);
      o->end();
    }
    { Fl_Button* o = new Fl_Button(0, 345, 85, 25, "Load pose...");
      o->callback((Fl_Callback*)cb_Load);
    }
    { Fl_Button* o = new Fl_Button(90, 345, 85, 25, "Save pose...");
      o->callback((Fl_Callback*)cb_Save);
    }
    o->end();
  }
}

void CVUI::show() {
  cvWindow->show();
}

void CVUI::drawGL() {
  //if (charVec.update)
//  charVec.updateTM();
if (meshToRender) {
  glEnable(GL_LIGHTING);
  renderTriMesh(meshToRender, dispMode);
}
if (charVec.vis) {
  if (lightingEnabled)
    glEnable(GL_LIGHTING);
  else
    glDisable(GL_LIGHTING);
  charVec.render(dispMode, bkgColor);
}
if (showSelEx->value() != 0) {
 int i;
 for (i=1; i <= exampleB->size(); i++) {
  if (exampleB->selected(i) && i-1 < cvGF->numExamples) {
   matchPoses[i-1].drawGL();
   renderTriMesh(&matchMeshes[i-1], dispMode, bkgColor);
//   int j;
//   for (j=0; j < matchMeshes[i-1].numPts(); j++) {
//     glbSphere(matchMeshes[i-1].getPt(j), 0.01, 5);
//   }
  }
 }
}
if (showMarkers->value() != 0 && matchGF) {
int i;
for (i=0; i < matchGF->markerRefs.size(); i++) {
if (matchGF->markerRefs[i] > 0 && !matchGF->markers->markers[i].pos.iszero()) {
glColor3f(1, 1, 0);
glbSphere(matchGF->markers->markers[i].pos, 0.01);
glColor3f(0, 1, 0);
glbSphere(matchGF->curMesh->getPt(matchGF->markerRefs[i]), 0.01);
glDisable(GL_LIGHTING);
glColor3f(1, 0, 0);
glBegin(GL_LINES);
matchGF->markers->markers[i].pos.glVertex();
matchGF->curMesh->getPt(matchGF->markerRefs[i]).glVertex();
glEnd();
glEnable(GL_LIGHTING);
}
}
}
}

void * CVUI::notify(const char *msg) {
  return NULL;
}

void CVUI::updateExampleB() {
  exampleB->clear();
int i;
for (i=0; i < cvGF->numExamples; i++) {
 char s[80];
 sprintf(s, "%d: %d", i, cvGF->examples[i].charID);
 exampleB->add(s, NULL);
}
}

void CVUI::setComponents() {
  double comps[7];
comps[0] = 1;
comps[1] = comp0VS->value();
comps[2] = comp1VS->value();
comps[3] = comp2VS->value();
comps[4] = comp3VS->value();
comps[5] = comp4VS->value();
comps[6] = comp5VS->value();
//cvGF->cv->updateCurComponents(cvGF->examples[cvGF->numExamples-1].dofs);
cvGF->cv->updateLocalPos(comps, 6);
cvGF->cv->updateTM();
redrawV();
}

void CVUI::showSkel() {
  skelWindow->show();
//skelScroll->clear();
PObject *obj = new PObject(charVec.skel);
obj->create("CV Skeleton", 5, 5, skelScroll);
obj->editCB = editCB;
}

void CVUI::editCB(PropUI*) {
  charVec.skel->updateCoords();
scSkin.skel->copyVals(charVec.skel);
scSkin.skel->updateCoords();
scSkin.updatePoints();
double dofs[100];
charVec.dofsFromSkel(charVec.skel, dofs);
charVec.updateCurComponents(dofs);
cvUI->setComponents();
}
#include "skinCalc.h"

void CVUI::clickGL(GLuint *nameBuf, double x, double y, int button) {
  cvClick(x, y, button);
}

void CVUI::dragGL(int x, int y) {
  cvDrag(x, y);
}

bool CVUI::startDragGL(GLuint *nameBuf, int x, int y) {
  return cvStartDrag(nameBuf, x, y);
}
