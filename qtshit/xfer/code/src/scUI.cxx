// generated by Fast Light User Interface Designer (fluid) version 1.0103

#include "scUI.h"
#include "doppel2.h"
#include "cli.h"
#include "skeleton.h"
#include "skinCalc.h"
#include "trimesh.h"
#include "trimesh_render.h"
extern Skeleton *matchSkel;
extern Skin curSkin, scSkin;
extern Skeleton *scSkel;
extern TriMesh *scMesh;

inline void SCUI::cb_scWindow_i(Fl_Window*, void*) {
  showSkel();
}
void SCUI::cb_scWindow(Fl_Window* o, void* v) {
  ((SCUI*)(o->user_data()))->cb_scWindow_i(o,v);
}

inline void SCUI::cb_showRep_i(Fl_Round_Button*, void*) {
  redrawV();
}
void SCUI::cb_showRep(Fl_Round_Button* o, void* v) {
  ((SCUI*)(o->parent()->user_data()))->cb_showRep_i(o,v);
}

inline void SCUI::cb_showSkinPts_i(Fl_Round_Button*, void*) {
  redrawV();
}
void SCUI::cb_showSkinPts(Fl_Round_Button* o, void* v) {
  ((SCUI*)(o->parent()->user_data()))->cb_showSkinPts_i(o,v);
}

inline void SCUI::cb_replayVS_i(Fl_Value_Slider*, void*) {
  setMatchSkelFrame(replayVS->value());
redrawV();
}
void SCUI::cb_replayVS(Fl_Value_Slider* o, void* v) {
  ((SCUI*)(o->parent()->user_data()))->cb_replayVS_i(o,v);
}

inline void SCUI::cb_showSCMesh_i(Fl_Round_Button*, void*) {
  redrawV();
}
void SCUI::cb_showSCMesh(Fl_Round_Button* o, void* v) {
  ((SCUI*)(o->parent()->user_data()))->cb_showSCMesh_i(o,v);
}

inline void SCUI::cb_Edit_i(Fl_Button*, void*) {
  showSkel();
}
void SCUI::cb_Edit(Fl_Button* o, void* v) {
  ((SCUI*)(o->parent()->user_data()))->cb_Edit_i(o,v);
}

inline void SCUI::cb_showSCSkel_i(Fl_Round_Button*, void*) {
  redrawV();
}
void SCUI::cb_showSCSkel(Fl_Round_Button* o, void* v) {
  ((SCUI*)(o->parent()->user_data()))->cb_showSCSkel_i(o,v);
}

inline void SCUI::cb_Load_i(Fl_Button*, void*) {
  char *fname = fl_file_chooser("Load pose...", "*.po.txt", NULL);
if (fname) {
  ifstream in;
  if (!openIFStream(&in, fname, "pose")) {
    return;
  }
  scSkel->loadPose(in);
};
}
void SCUI::cb_Load(Fl_Button* o, void* v) {
  ((SCUI*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

inline void SCUI::cb_Save_i(Fl_Button*, void*) {
  char *fname = fl_file_chooser("Save pose...", "*.po.txt", NULL);
//if (fname)
//  savePose(fname);
}
void SCUI::cb_Save(Fl_Button* o, void* v) {
  ((SCUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

SCUI::SCUI() {
  Fl_Window* w;
  { Fl_Window* o = scWindow = new Fl_Window(380, 377, "SkinCalc");
    w = o;
    o->callback((Fl_Callback*)cb_scWindow, (void*)(this));
    { Fl_Round_Button* o = showRep = new Fl_Round_Button(10, 90, 25, 25, "show captured points");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)cb_showRep);
    }
    { Fl_Round_Button* o = showSkinPts = new Fl_Round_Button(10, 115, 25, 25, "show skinned points");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_showSkinPts);
    }
    { Fl_Value_Slider* o = replayVS = new Fl_Value_Slider(60, 45, 295, 25, "replay");
      o->type(1);
      o->maximum(999);
      o->step(1);
      o->callback((Fl_Callback*)cb_replayVS);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Round_Button* o = showSCMesh = new Fl_Round_Button(10, 140, 25, 25, "show SC mesh");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_showSCMesh);
    }
    { Fl_Button* o = new Fl_Button(40, 205, 120, 25, "Edit Skeleton");
      o->callback((Fl_Callback*)cb_Edit);
    }
    { Fl_Round_Button* o = showSCSkel = new Fl_Round_Button(10, 165, 25, 25, "show SC skel");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_showSCSkel);
    }
    o->end();
  }
  name="SkinCalc";
  { Fl_Window* o = skelWindow = new Fl_Window(1039, 373, "Skels");
    w = o;
    o->user_data((void*)(this));
    { Fl_Scroll* o = skelScroll = new Fl_Scroll(0, 0, 1035, 340);
      o->type(1);
      o->box(FL_DOWN_BOX);
      o->end();
    }
    { Fl_Button* o = new Fl_Button(0, 345, 85, 25, "Load pose...");
      o->callback((Fl_Callback*)cb_Load);
    }
    { Fl_Button* o = new Fl_Button(90, 345, 85, 25, "Save pose...");
      o->callback((Fl_Callback*)cb_Save);
    }
    o->end();
  }
}

void SCUI::show() {
  scWindow->show();
}

void SCUI::drawGL() {
  if (matchSkel) {
 matchSkel->drawGL();
 if (showRep->value() != 0)
  renderMarkers(replayVS->value());
 if (showSkinPts->value() != 0)
  curSkin.renderPoints();
}
if (scMesh && showSCMesh->value() != 0) {
	renderTriMesh(scMesh, dispMode, bkgColor);
}
if (scSkin.skel && showSCSkel->value() != 0) {
 scSkin.skel->drawGL();
}
}

void SCUI::showSkel() {
  skelWindow->show();
//skelScroll->clear();
PObject *obj = new PObject(scSkel);
obj->create("SC Skeleton", 5, 5, skelScroll);
obj->editCB = editCB;
}

void SCUI::editCB(PropUI*) {
  scSkel->updateCoords();
scSkin.updatePoints();
scSkin.updateMesh(scMesh);
redrawV();
}
